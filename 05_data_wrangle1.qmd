# Data Wrangling I: Labels {#wrang1}


```{r setup05, echo = F, include=FALSE}
if(Sys.getenv("USERNAME") == "filse" ) .libPaths("D:/R-library4") 
if(Sys.getenv("USERNAME") == "filse" ) path <- "D:/oCloud/RFS/"
knitr::opts_chunk$set(collapse = F,cache = F)
library(haven)
library(tidyverse)
library(Statamarkdown)
theme_set(theme_gray() + theme(axis.text.x = element_text(size=rel(1.45))))
```
```{r}
library(tidyverse)
etb18_kap5 <- haven::read_dta("./data/BIBBBAuA_2018_suf1.0.dta",
                               col_select = c("intnr", "S1", "m1202", "Bula","F411_01","az","zpalter")) %>% 
  filter(F411_01<9, zpalter < 100)
```


## Labels aus anderen Programmen in R

In vielen Programmen wie Stata oder SPSS werden die labels häufig durch die Operationen "mitgeschleift" und dann ausgegeben. Das ist in R nicht der Fall. Stattdesssen können wir mit Hilfe des Variablentyps `factor` Labels vergeben. Das Vorgehen mag für alle, die schon lange mit Stata oder SPSS gearbeitet haben, etwas ungewöhnlich sein - ist aber in der Praxis sehr hilfreich, wenn man sich den entsprechenden Workflow angewöhnt hat.

Wenn wir bspw. die Ansicht mit `View()` öffnen oder eine Auszählung mit `count()` erstellen, werden uns labels angezeigt:

```{r}
#| eval: false
View(etb18_kap5)
etb18_kap5 %>% count(S1)
```

Diese sind als `attributes()` Variablen zugeordnet:

```{r}
attributes(etb18_kap5$S1)
```
...leider machen die `attributes()` immer wieder Probleme:
```{r}
#| error: true
library(ggplot2)

ggplot(data = etb18_kap5, aes(x = zpalter, y = az, color = S1 )) + 
  geom_point()
```
In den beiden vorherigen Kapiteln haben wir schon gesehen, dass Labels in R immer etwas extra Aufwand bedeuten.
In Grafiken mussten wir mit `breaks = c(1,2), labels = c("Männer", "Frauen")` die Labels extra erstellen.

Wie können wir die Labels `attributes()` verwenden und so Tipparbeit sparen?
```{r}
#| echo: false
#| eval: false
#| message: false
#| warning: false
library(labelled)
library(gt)
tibble(value = 1:2,
           `.` = "",
           label = names(val_labels(unique(etb18_kap5$S1)))) %>% 
  flextable::flextable() %>% 
  flextable::border_remove() %>% 
  flextable::autofit()
```

`{haven}` enthält sich die Funktion `as_factor`[^2], mit der wir aus Labels direkt eine `factor`-Variable erstellen können:

[^2]: Nicht zu verwechseln mit `as.factor()` aus base R - der `_` macht einen Unterschied!
```{r}
etb18_kap5$S1_fct <- as_factor(etb18_kap5$S1)

# ansehen:
etb18_kap5 %>% select(contains("S1")) %>% head()
```

```{r}
ggplot(data = etb18_kap5, aes(x = zpalter, y = az, color = S1_fct )) + 
  geom_point()
```

## `factor` selbst erstellen oder bearbeiten

Für `m1202` sind die Labels aber etwas lang:
```{r}
tab1 <- etb18_kap5 %>% count(m1202) %>% mutate(m1202_fct = as_factor(m1202))
tab1
```
Alternativ können wir auch mit `factor()` und `levels` und `labels` selber labeln. Die `labels` werden dann der Reihenfolge nach den Zahlen aus `levels` zugewiesen. Außerdem wird aus allen nicht angegebenen `levels` automatisch `NA`:
```{r}
tab1$m1202_fct2 <- factor(tab1$m1202, 
                        levels = c(1,2,3,4), 
                        labels = c("ohne Abs.", "dual/schul.", "Aufstiegsfortb.", "FH/Uni"))
tab1
```


<!-- ```{r} -->
<!-- #| echo: false -->
<!-- theme_set(theme_gray(base_size = 15) + theme(axis.title.x = element_text(size = rel(1.15),face = "bold",family = "mono")))  -->
<!-- ``` -->
<!-- ```{r} -->
<!-- #| out-height: 60% -->
<!-- #| out-width: 60% -->
<!-- #| fig-align: "center" -->
<!-- #| layout-ncol: 2 -->
<!-- tab1 %>%  -->
<!--   ggplot(data = ., aes(y = m1202_fct, x = n)) + -->
<!--   geom_col(position=position_dodge(), fill = "sienna1") + -->
<!--   labs(y="") -->

<!-- tab1 %>%  -->
<!--   ggplot(data = ., aes(y = m1202_fct2, x = n)) + -->
<!--   geom_col(position=position_dodge(), fill = "mediumturquoise") + -->
<!--   labs(y="") -->
<!-- ``` -->

<!-- **[Blogbeitrag zu labels in R](https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/)** -->

Oder wir nutzen die Funktionen aus `{forcats}` zur recodierung eines `factors`.
`{forcats}` ist Teil des `{tidyverse}`.
Mit `fct_recode()` können wir die `levels` verändern:
```{r}
levels(tab1$m1202_fct)[3]

tab1$m1202_fct3 <- fct_recode(tab1$m1202_fct,
  `duale / schulische Ausb.` = "duale o. schulische Berufsausbildung/einf.,mittl. Beamte", # bei Leerzeichen `` um die Wörter
  )
```


```{r}
#| eval: false
tab1 %>% select(m1202_fct,m1202_fct2,m1202_fct3)
```
```{r}
#| echo: false
#| warning: false
library(systemfonts)
library(flextable)
tab1 %>% select(m1202_fct,m1202_fct2,m1202_fct3) %>% flextable() %>% 
  autofit() %>% border_remove() %>% 
  bg(i = ~m1202_fct2 == "dual/schul.",bg = "#CFFFDF") %>%
  flextable::font(part = "header",fontname = "Azeret Mono")
    
```

[Weitere `fct_....()` Funktionen aus `{forcats}`](#fct_cats), einen Überblick gibt das [Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/factors.pdf).

## Übung

```{r}
etb18_ue5 <- haven::read_dta("./data/BIBBBAuA_2018_suf1.0.dta",
                               col_select = c("intnr", "S1", "m1202", "Bula","F411_01")) %>% 
  filter(F411_01<9)
```

Bearbeiten Sie die labels dieses Diagramms:

**`F411_01`: `r str_wrap(attributes(etb18_kap5$F411_01)$label)`iten?**


```{r}
#| echo: false
#| warning: false
library(labelled)
data.frame(value = 1:4,
           label = names(val_labels(etb18_kap5$F411_01)[-5])) %>% 
  kableExtra::kable()
```

```{r}
#| code-fold: show
#| out-width: "50%"
#| out-height: "50%"
#| warning: false
tab_ue5 <- 
  etb18_ue5 %>% 
  count(F411_01)
tab_ue5

tab_ue5 %>%
  ggplot(data = ., aes(x = F411_01, y = n)) +
  geom_col(fill = "steelblue3")
```

+ Erstellen Sie dafür zunächst einen `data.frame` mit der Auszählung durch `count()` und legen diese als Objekt ab.
+ Wie können Sie die labels aus den `attributes()` mit `as_factor()` in eine Variable `F411_01_fct` übernehmen?
+ Erstellen Sie einen `factor()` Variable `F411_01_fct2` mit den den gewünschten Beschriftungen mit Hilfe von `labels =`. (Sie können die Labels der Variable `F411_01` mit `attributes(etb18_kap5$F411_01)$labels` nachsehen.) 
+ Verwenden Sie die gelabelten Variablen für die Grafik.

**Bonusübung:** Was müssten wir ändern, um die Grafik nach Geschlecht (`S1`) zu erstellen?

## Anhang

### Labels löschen mit `zap_...` aus `{haven}`

Häufig führen die Label-`attributes()` zu Problemen in der weiteren Verarbeitung.
Mit `haven::zap_labels()` können wir die Value labels aus einem Datensatz löschen mit `haven::zap_label()` können wir die Variable labels entfernen.
```{r}
etb18_kap5
etb18_kap5 %>% 
  haven::zap_labels() # value labels raus
```


### Labels selbst erstellen und ranspielen

Ein alternativer Weg geht über einen kleinen Label-`data.frame` und `left_join()` (mehr zu `left_join()` später.)

```{r}
tab2 <- etb18_kap5 %>% count(m1202)
```
```{r}
lab_df <- data.frame(m1202=1:4)
lab_df
lab_df$m1202_lab <- factor(lab_df$m1202,levels = 1:4,
                           labels = c("ohne Abs.", "dual/schul.", "Aufstiegsfortb.", "FH/Uni"))
lab_df
```


```{r}
tab2 %>% 
  left_join(lab_df,by = "m1202")
```
In `ggplot()` geben wir dann `m1202_lab` an, um diese auf die x-Achse zu setzen:
```{r}
#| out-width: "80%"
#| out-height: "50%"
tab2 %>% 
  left_join(lab_df,by = "m1202") %>% 
  ggplot(data = ., aes(x = m1202_lab, y = n)) +
  geom_col(position=position_dodge(), fill = "turquoise3")
```



### Labels in R erstellen und nach bspw. Stata exportieren
Wenn wir aber beispielsweise einen Datensatz für Stata labeln wollen, hilft uns wieder `{labelled}`:
```{r}
library(labelled)
```

```{r}
etb18_kap5$S1_num2 <- as.numeric(etb18_kap5$S1)
attributes(etb18_kap5$S1_num2)
val_labels(etb18_kap5$S1_num2) <- c("Mann"=1,"Frau"=2)
attributes(etb18_kap5$S1_num2)
etb18_kap5 %>% count(S1_num2)
```
```{r}
#| eval: false
etb18_kap5 %>% 
  select(S1_num2) %>% 
  haven::write_dta(.,path = "./data/etb18_kap5.dta")
```

...in *Stata*:
```{stata}
use "./data/etb18_kap5.dta" 
tab S1_num2
```

[Mehr zu `labels` in `{labelled}`](https://joseph.larmarange.net/intro_labelled.html).

<!-- factors stellen eine strukturierte Beziehung zwischen den verschiedenen Ebenen (Werten) einer kategorialen Variable her, wie z. B. Wochentage oder Antworten auf eine Frage in einer Umfrage. Auf diese Weise lässt sich leichter erkennen, wie sich ein Element zu den anderen Elementen in einer Spalte verhält. Obwohl factors wie Zeichenvektoren aussehen (und sich oft auch so verhalten), werden sie von R als Ganzzahlvektoren behandelt. Sie müssen also sehr vorsichtig sein, wenn Sie sie als Strings behandeln. -->

<!-- Einmal erstellt, können factors nur einen vordefinierten Satz von Werten enthalten, die als Ebenen bezeichnet werden. Standardmäßig sortiert R die Ebenen immer in alphabetischer Reihenfolge. Wenn Sie zum Beispiel einen Faktor mit 2 Ebenen haben: -->


