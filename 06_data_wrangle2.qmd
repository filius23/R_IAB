# Data Wrangling II {#wrang2}

```{r}
#| include: false
if(Sys.getenv("USERNAME") == "filse" ) .libPaths("D:/R-library4") 
if(Sys.getenv("USERNAME") == "filse" ) path <- "D:/oCloud/RFS/"
windowsFonts(mono=windowsFont("Fira Code"))
```


```{r}
#| message: false
#| warning: false
library(tidyverse)
```

Wir gehen nochmal zurück zum Uni-Datensatz vom Anfang:

```{r}
dat1 <- data.frame(studs = c(19173,5333,15643), 
                   profs = c(322,67,210),
                   gegr  = c(1971,1830,1973),
                   prom_recht = rep(TRUE,3),
                   uni = c("Uni Bremen","Uni Vechta", "Uni Oldenburg"))
dat2 <- data.frame(studs = c(14954,47269 ,23659,9415 ,38079), 
                   profs = c(250,553,438 ,150,636),
                   prom_recht = c(FALSE,TRUE,TRUE,TRUE,FALSE),
                   gegr  = c(1971,1870,1457,1818,1995),
                   uni = c("FH Aachen","RWTH Aachen","Uni Freiburg","Uni Bonn","FH Bonn-Rhein-Sieg"))
dat1
dat2
```

Mit `bind_rows()` aus `{dplyr}` können wir die beiden `data.frame`s zusammensetzen:
```{r}
dat3 <- bind_rows(dat1,dat2)
dat3
```


Es gibt auch `bind_cols()` um Datensätze spaltenweise zusammenzufügen.
Möglichkeiten, Datensätzen auf Basis einer oder mehrer Identifikationsvariablen zu "mergen" lernen wir auch noch [später](#wrang3) kennen.

## Variablen erstellen {#var}

Nun sehen wir uns die Möglichkeiten, Variablen zu erstellen, nochmal etwas genauer an.
Grundsätzlich gibt es zwei Arten, Variablen in einen `data.frame` hinzuzufügen:

### base R: `...$newvar <-`


```{r}
dat3$studs_to_mean  <- dat3$studs - mean(dat3$studs)
dat3
```

Mit `<- NULL` können Variablen auch gelöscht werden:
```{r}
dat3$studs_to_mean  <-  NULL
dat3
```


### {dplyr}: `mutate(neue_var= )`


Eine alternative Möglichkeit, Variablen zu erstellen ist `mutate(neu_variable = )` aus `{dplyr}` (`{tidyverse}`):
```{r, echo = F, out.height="90%",out.width="90%", fig.align="center"}
#| echo: false
knitr::include_graphics("./pic/103_mutate.png")
```

<!-- Wir hatten die Variante aus `{dplyr}` (`{tidyverse}`) bereits in [Kapitel 3](03_desc.qmd#crosscount) kurz kennen gelernt.-->
Die grundsätzliche Struktur ist immer `datensatz %>% mutate(neue_var = ....)`: 

```{r}
dat3 %>% mutate(studs_to_mean = studs-mean(studs))
```

Wir können auch mehrere Variablen innerhalb eines `mutate()`-Befehls erstellen:
```{r}
dat3 %>% mutate(studs_to_mean = studs-mean(studs),
                profs_to_mean = profs-mean(profs))

```

Oder Variablen können innerhalb von `mutate()` weiterverwendet werden:
```{r}
dat3 %>% mutate(rel_to_mean = studs-mean(studs),
                above_mean = rel_to_mean > 0)
```


Der Ausgangsdatensatz bleibt aber unverändert:
```{r}
dat3
```

Wenn wir die Ergebnisse behalten wollen, müssen wir das Ergebnis in einem Objekt ablegen:
```{r}
dat4 <-
  dat3 %>% 
  mutate(rel_to_mean = studs-mean(studs),
         above_mean = rel_to_mean > 0)

dat4
```
::: callout-tip
# Dummy-Variablen erstellen mit `as.numeric()`

Wenn wir logische Variablen mit `as.numeric()` in numerische Variablen umformatieren erhalten wir eine Dummy-Codierung:
```{r}
as.numeric(dat3$prom_recht )
dat3 %>% 
  mutate(prom_dummy = as.numeric(prom_recht ) )
```

:::

### [Übung](#mutate1) {#ue06_1}



## Gruppierung mit `group_by()` oder `.by=` {#group_by}

Die wirkliche Stärke von `mutate()` kommt aber erst zum Tragen, wenn wir es mit weiteren `{dplyr}`-Funktionen kombinieren.
Eine häufige Aufgabe in der Datenaufbereitung sind gruppierte Werte.

```{r, echo = F, out.height="90%",out.width="90%", fig.align="center"}
#| echo: false
knitr::include_graphics("./pic/601_mutate_summarise.png")
```


Wir machen unseren Beispieldatensatz noch etwas kleiner:
```{r}
dat5 <- dat3 %>% 
  select(-uni,-gegr) # nur dass alles zu sehen ist
```

Wenn wir einen Datensatz mit `group_by()` entlang den Werten einer Variablen gruppieren, dann werden alle weiteren `mutate()` Berechnungen nur innerhalb dieser Gruppen ausgeführt:

```{r}
dat5 %>%
  mutate(m_studs = mean(studs),
         m_profs = mean(profs)) %>% 
  group_by(prom_recht) %>%
  mutate(m_studs2 = mean(studs),
         m_profs2 = mean(profs))
```


Verwenden wir `group_by()`, können (sollten!) wir mit `ungroup()` die Gruppierung wieder aufheben, sobald wir sie nicht mehr benötigen:
```{r}
#| eval: false
#| label: demo
dat5 %>%
  mutate(m_studs = mean(studs),
         m_profs = mean(profs)) %>% 
  group_by(prom_recht) %>%
  mutate(m_studs2 = mean(studs)) %>% 
  ungroup() %>% 
  mutate(m_profs2 = mean(profs))
```


```{r}
#| echo: false

# um wirklich gleiche Nachkommastellen zu erhalten wie dann mit .by = 
dat5 %>%
  mutate(m_studs = mean(studs),
         m_profs = mean(profs)) %>% 
  group_by(prom_recht) %>%
  mutate(m_studs2 = mean(studs)) %>% 
  ungroup() %>% 
  mutate(m_profs2 = mean(profs)) %>% 
  data.frame()
```

Seit `{dplyr}`-Version 1.1.1 können wir direkt in `mutate()` mit dem Argument `.by=` eine Gruppierung angeben.
Diese Gruppierung `.by=` gilt dabei nur für die unmittelbaren Berechnungen innerhalb `mutate()` - wir sparen uns das `ungroup()`.
```{r}
dat5 %>%
  mutate(m_studs = mean(studs),
         m_profs = mean(profs)) %>% 
  mutate(m_studs2 = mean(studs),
         .by = prom_recht) %>% 
  mutate(m_profs2 = mean(profs))
```


Mit `summarise()` statt `mutate()` erhalten wir eine Übersicht:
```{r}
dat5 %>%
  summarise(m_studs = mean(studs),.by = prom_recht)
```



### [Übung](#grpue) {#ue06_2}


## `across()`: Mehrere Variablen bearbeiten {#across}

Eine sehr vielseitige Erweiterung für `mutate()` und `summarise()` ist `across()`.
Hier mit können wir eine Funktion auf mehrere Spalten gleichzeitig anwenden, ohne uns zu wiederholen:

```{r}
dat3 %>%
  summarise(studs = mean(studs),
            profs = mean(profs))
```

Hier ist `across()` deutlich kürzer - für die Variablenauswahl können wir die [`?select_helpers`](02_intro.qmd#selecthelpers) verwenden - z.B. `matches()`:



```{r}
dat3 %>%
  summarise(across(.cols = matches("studs|profs"),.fns = ~mean(.x)))
```

Natürlich ist das auch kombinierbar mit `group_by()`:
```{r}
dat3 %>%
  group_by(prom_recht) %>%
  summarise(across(matches("studs|profs"), ~mean(.x)))
```

Wir können auch mehrere Funktionen durchführen, dafür müssen wir sie in einer `list()` angeben:
```{r}
dat3 %>%
  group_by(prom_recht) %>%
  summarise(across(matches("studs|profs"), list(mean = ~mean(.x), sd = ~sd(.x))))
```

Diese `list()`auch vorab ablegen und dann verwenden:
```{r}
wert_liste <- list(mean = ~mean(.x), sd = ~sd(.x), max = ~max(.x,na.rm = T))

dat3 %>%
  group_by(prom_recht) %>%
  summarise(across(matches("studs|profs"), wert_liste))
```

Mit dem `.names()`-Argument können wir auch die Benennung der Spalten steuern. 
`{.fn}` steht dabei als Platzhalter für die angewendete Funktion, `{.col}` für den Namen der bearbeiteten Variable.

```{r}
dat3 %>%
  group_by(prom_recht) %>%
  summarise(across(matches("studs|profs"), 
                   list(mean = ~mean(.x), sd = ~sd(.x)),
                   .names = "{.fn}_{.col}"))
```


<!-- ...eine sehr praktische Hilfsfunktion aus `{dplyr}` ist `n()` - so erhalten wir die Fallzahlen. Allerdings werden so auch ggf. Zeilen mit `NA` mitgezählt, sodass wir für die Zähler alle nicht-`NA` Zeilen eine anderen Lösung brauchen, bspw. `sum(!is.na(.x))` - also die Summe der "is not NA"==`TRUE`: -->

<!-- ```{r} -->
<!-- dat3 %>% -->
<!--   group_by(prom_recht) %>% -->
<!--   summarise(across(matches("studs|profs"),  -->
<!--                    list(mean = ~mean(.x), sd = ~sd(.x), n = ~n(), notNA = ~sum(!is.na(.x))), -->
<!--                    .names = "{.fn}_{.col}")) -->
<!-- ``` -->


Alle gezeigten Funktionen funktionieren natürlich auch mit `mutate()`:

```{r}
dat3 %>%
  mutate(across(matches("studs|profs"), ~mean(.x), .names = "m_{.col}"))
```

[Mehr Beispiele in der Hilfe zu across](https://dplyr.tidyverse.org/reference/across.html)


### [Übung](#across_ue) {#ue06_3}

## Eigene Funktionen 

Woher kommt aber die `~`[^tilde] in `across()`?
Dazu sehen wir uns einmal die Grundlagen von Funktionen in R an. 

[^tilde]: "Tilde" - Tastaturbefehle: `Alt Gr` + `*` auf Windows. Auf macOS `Alt` + `N` und anschließend ein Leerzeichen, damit die Tilde erscheint.

Dazu sehen wir uns drei Zufriedensheitsvariablen für die Befragten aus den Zeilen 12-16 an:

```{r}
#| echo: false
#| warning: false
#| message: false
library(gt)

  etb_worksat <- 
    haven::read_dta("./orig/PENDDAT_cf_W13.dta",n_max = 1) %>% 
    select(contains("PEO0300"))
  

  

etb_worksat %>%
  map_dfr(.,~attributes(.x)$label) %>%
  pivot_longer(cols = everything(),names_to = "var") %>% 
  mutate(var = glue::glue("`{var}`"),
         value = str_remove(value, "Wichtig bei Beruf\\:")) %>% 
  rename(`Wichtig bei Beruf` = value) %>% 
  gt() %>% 
  tab_options(  table.font.size = 12) %>% 
  tab_style(style = cell_text(font = "Roboto"),locations = cells_body(var)) %>% 
  fmt_markdown(columns = 1)


    etb_worksat %>% 
    map_dfr(.,~attributes(.x)$labels,.id = "var") %>% 
    pivot_longer(-var) %>% 
    pivot_wider(names_from = value,values_from = name) %>% 
    select(matches("^1|^2|^3|^4|-10")) %>% 
    rename(`-10 bis -1`=`-10`) %>% 
    mutate(`-10 bis -1` = "t.n.z./k.A.") %>% 
    distinct() %>% 
    gt() %>% 
    tab_options(  table.font.size = 11)
```
```{r}
pend <- haven::read_dta("./orig/PENDDAT_cf_W13.dta")

sat_small <- 
  pend %>% 
    filter(welle == 1) %>% 
    select(matches("PEO0300(a|b|c)")) %>% 
    slice(12:16) %>% 
    haven::zap_labels() %>% haven::zap_label() # labels entfernen
sat_small
```
```{r}
#| echo: false
sat_small <- sat_small %>% mutate(across(.cols = everything(),.fns = ~as.numeric(.x)))
```

Häufig wollen wir mehrere Variablen mit der gleichen Operation bearbeiten. 
Oben haben wir gesehen wie sich das mit [`across()`](#across) für existierende Funktionen erledigen lässt. 
Was aber, wenn wir eine Berechnung durchführen wollen, die nicht einfach die Anwendung von `mean()`, `sd()` o.ä. ist?

```{r}
sat_small %>% 
  mutate(dmean_PEO0300a = PEO0300a - mean(PEO0300a,na.rm = T),
         dmean_PEO0300c = PEO0300c - mean(PEO0300c,na.rm = T))

```

...und jetzt noch `F1450_06`?
Dann hätten wir drei Mal das mehr oder weniger gleiche getippt und damit gegen das "DRY"-Prinzip[^dry] verstoßen. Außerdem gibt es im PASS CampusFile insgesamt `r pend %>% select(matches("PEO0300")) %>% ncol()` Spalten mit ähnlichen Zufriedenheitsvariablen. Wenn wir die alle bearbeiten möchten, ist copy & paste keine echte Option.

[^dry]: Do not repeat yourself, siehe [Wickham et al](https://r4ds.had.co.nz/functions.html): "You should consider writing a function whenever you’ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code)."

Eigene Funktionen helfen uns, das DRY-Prinzip in R umzusetzen.
Wir machen die Berechnungsschritte Teil einer `function()` und wenden diese dann auf die gewünschten Variablen an.
Eine Funktion hat einen Input, für welchen ein Platzhalter in der `()` definiert wird. 
Dieser Platzhalter kann dann innerhalb der Funktion - zwischen den `{}` - aufgerufen und bearbeitet werden.
Als Ergebnis erhalten wir das Objekt, das wir in `return()` angeben. `return()` muss immer als letztes angeben werden und wir können immer nur *ein* Objekt als Output definieren:
```{r}
dtomean <- function(x){
  d_x <- x - mean(x,na.rm = T)
  return(d_x)
}
```


```{r}
var1 <- c(1,6,3,7,8,1,5)
mean(var1)
dtomean(var1)
```

Wie können wir unsere Funktion `dtomean()` jetzt auf die Variablen aus unserem `sat_small` anwenden? 
Grundsätzlich haben wir ganz [zu Beginn](#02_intro)  gesehen, dass ein `data.frame` lediglich zusammengefügte Sammlung von Vektoren (den Variablen) ist. 
Dementsprechend können wir jetzt unsere `dtomean()` auf eine Variable (einen Vektor) anwenden, indem wir ihn mit `data.frame$variablename` aufrufen:
```{r}
dtomean(sat_small$PEO0300a)
```

Um unsere Funktion jetzt auf jede Variable eines `data.frame` anzuwenden, können wir `lapply()` verwenden - der Output ist dann eine Liste, deren Elemente nach den Variablennamen benannt werden:
```{r}
lapply(sat_small,FUN = dtomean)
res <- lapply(sat_small,FUN = dtomean)
class(res)
```

`map()` aus `{purrr}` ist eine Alternative zu `lapply`:
```{r}
lapply(sat_small,FUN = dtomean)
sat_small %>% map(~dtomean(.x))
```
Diese *formula syntax* Schreibweise findet sich dann auch in `across()` wieder - zusätzlich haben wir hier direkt über `.names =` die Möglichkeit, die Variablennamen für die Ergebnisse zu bearbeiten:
```{r}
sat_small %>% 
  mutate(across(matches("PEO0300"),~dtomean(.x),.names = "dmean_{.col}"))
```

<!-- ::: callout-tip -->

<!-- + Wir können Funktionen auch für andere Zwecke verwenden als Variablen zu bearbeiten. Bspw. können wir mit Funktionen eine Reihe an Datensätzen einlesen und direkt den gleichen Bearbeitungsschritten unterziehen, Modellserien oder Grafikserien erstellen usw. - etwas mehr dazu in [Kapitel ](#12_apply_loop). Weiterführende Beispiele [hier](#purrr)  -->

<!-- + [Die 'formula syntax' Schreibweise  mit `~.x` wird zunehmend durch anonyme Funktionen `\(x) fun(x)` abgelöst - wird aber auf absehbare Zeit der Standard bleiben.](#anonymfun) -->

<!-- ::: -->

### [Übung](#fnct) {#ue06_4}


<!-- ```{r} -->
<!-- mode <- function(x) { -->
<!--   names(which.max(table(x)))  -->
<!-- } -->

<!-- mode(etb18$m1202) -->
<!-- ``` -->



## Hilfsfunktionen `ifelse()` und `case_when()`

`ifelse()` ist eine große Hilfe für alle Umcodierungen: wir formulieren darin eine Bedingung und wenn diese zutrifft wird der erste Wert eingesetzt, wenn nicht wird der zweite Wert eingesetzt. Hier fragen wir also ab, ob `studs-mean(studs)` größer `0` ist - dann wird `darüber` eingesetzt, ansonsten eine `darunter`:


```{r}
dat3 %>% mutate(rel_to_mean = studs-mean(studs),
                ab_mean_lab = ifelse(rel_to_mean > 0,"darüber","darunter"))
```

`case_when()` (`{dplyr}`) erweitert dieses Prinzip, sodass wir mehr als zwei Optionen angeben können. 
Die Syntax ist aber etwas anders: hier geben wir erst die Bedingung an, dann nach einer `~`[^tilde] die einzusetzenden Werte: 

```{r}
dat3 %>% mutate(alter = case_when(gegr < 1500 ~ "sehr alt",
                                  gegr < 1900 ~ "alt"))
```

Mit `TRUE` können alle Fälle angesprochen werden, die bis dahin keiner Bedingung entsprochen haben:
```{r}
dat3 %>% mutate(alter = case_when(gegr < 1500 ~ "sehr alt",
                                  gegr < 1900 ~ "alt",
                                  TRUE ~ "relativ neu"))
```


Das muss sich nicht auf eine Variable beschränken:

```{r}
dat3 %>% mutate(alter = case_when(gegr < 1500 & prom_recht == T ~ "sehr alte Uni",
                                  gegr < 1900 & prom_recht == T ~ "alte Uni",
                                  gegr > 1900 & prom_recht == T ~ "junge Uni",
                                  gegr < 1900 & prom_recht == F ~ "alte Hochschule",
                                  gegr > 1900 & prom_recht == F ~ "junge Hochschule"))
```

<!-- [{janitor}](https://appsilon.com/data-cleaning-in-r/) -->

<!-- `case_when()` kann aber auch außerhalb von `mutate()` mit der base-Version verwendet werden, dafür müssen aber alle Variablen mit `datensatz$` angewählt werden: -->
<!-- ```{r} -->
<!-- #| eval: false -->
<!-- case_when(dat3$gegr < 1500 & dat3$prom_recht == T ~ "sehr alte Uni", -->
<!--           dat3$gegr < 1900 & dat3$prom_recht == T ~ "alte Uni", -->
<!--           dat3$gegr > 1900 & dat3$prom_recht == T ~ "junge Uni", -->
<!--           dat3$gegr < 1900 & dat3$prom_recht == F ~ "alte Hochschule", -->
<!--           dat3$gegr > 1900 & dat3$prom_recht == F ~ "junge Hochschule") -->
<!-- ``` -->


### [Übung](#ifcase) {#ue06_5}

## Variablen umbenennen


Um Variablen umzubenennen gibt es `rename(neuer_name = alter_name)`

```{r}
sat_small %>% rename(neuername =PEO0300a)
```

Für fortgeschrittene Veränderungen empfiehlt sich ein Blick in `rename_with()`. Damit können wir [Regular Expressions](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf), bspw. aus [{stringr}](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf) verwenden. Hier nur ein Beispiel:

```{r}
sat_small %>% rename_with(~tolower(.))
sat_small %>% rename_with(~str_remove(.x,"PEO0300"))
sat_small %>% rename_with(~str_replace(.x,"PEO0300","Beruf_"))
```



<!-- ## `lapply()` und `map()` -->


<!-- [`across()` und `c_across()`](https://twitter.com/tmfmnk/status/1525840447419162625) -->

<!-- https://mgimond.github.io/ES218/Week03ab_groupby.html -->
<!-- https://datacarpentry.org/r-socialsci/ -->
<!-- data science in a box -->
<!-- https://medium.com/@tomazkastrun/eight-r-tidyverse-tips-for-everyday-data-engineering-8474f3d4af4f -->

<!-- https://medium.com/@alwinw/are-r-loops-really-that-slow-1bbf46b21fcb -->

<!-- ## across & select -->
<!-- https://gist.github.com/AlbertRapp/043c7941d0fa6478cbea55f45525befe -->


## Übungen

### Übung {#mutate1}


+ Erstellen Sie `dat3` wie [oben gezeigt](#var) aus `dat1` und `dat2`
+ Berechnen Sie das Betreuungsverhältnis (Studierende pro Professur `studs/profs`) an den Hochschulen relativ zum Mittelwert des Betreuungsverhältnisses (`rel_studprofs`). 
+ Liegt das Betreuungsverhältnis über oder unter dem Mittelwert? Wie können Sie den Befehl anpassen, sodass die Variable `rel_studprofs` lediglich `TRUE` oder `FALSE` enthält anstelle der Zahlenwerte.
+ Wandeln Sie `rel_studprofs` in eine Dummy-Variable mit 0/1 als Werten statt `TRUE`/`FALSE`

::: callout-tip

Daumenregel zur Entscheidung, ob `mutate()` oder `...$newvar <-` besser passt: Immer wenn es nur darum geht, schnell eine Variable zu erstellen/löschen, ist `...$newvar <-` die einfachere Wahl. Sobald es darüber hinaus geht, hat `mutate()` sehr große Vorteile ([folgender Abschnitt](#group_by)).

:::

[Zurück nach oben](#ue06_1)


### Übung {#grp_ue}

+ Verwenden Sie weiterhin den Uni-Datensatz.
+ Berechnen Sie das Betreuungsverhältnis (`studprofs`) relativ zum Mittelwert getrennt für Hochschulen/Unis mit und ohne Promotionsrecht und fügen Sie dieses als neue Spalte ein.
+ Testen Sie sowohl die Variante mit `group_by()` als auch `.by =`.

[Zurück nach oben](#ue06_2)

<!-- studs/profs berechnen -> über oder unter dem Schnitt?   -->
<!-- + studs/profs berechnen -> über oder unter dem Schnitt LABELN -->
<!-- + gruppiert nach `prom_recht` -->
  
  
### Übung {#across_ue}

+ Verwenden Sie den `pend_small`-Datensatz:

```{r}
#| include: false
haven::read_dta("./orig/PENDDAT_cf_W13.dta",
                               col_select = c("welle","PEO0400a","PEO0400b","PEO0400c","PEO0400d")
                               ) %>%  
  filter(welle == 2) %>% 
  mutate(id = floor(as.numeric(rownames(.))/10),
         across(matches("PE"),~.x<0)) %>% 
  mutate(na = rowSums(select(., matches("PE") )) ) %>% 
  summarise(sum_na = sum(na),.by = id) %>% 
  arrange(sum_na) %>% 
  filter(id %in% 13:15)
```


```{r}
pend_small <- haven::read_dta("./orig/PENDDAT_cf_W13.dta",
                               col_select = c("welle","zpsex","PEO0400a","PEO0400b","PEO0400c","PEO0400d")
                               ) %>% 
  filter(welle == 2) %>% 
  slice(1:15)
```

+ Berechnen Sie den Mittelwert für die Variablen `PEO0400a`, `PEO0400b`, `PEO0400c` und `PEO0400d`:
```{r}
#| echo: false
#| warning: false
#| message: false
library(gt)
etb18_smallx <-  haven::read_dta("./orig/PENDDAT_cf_W13.dta",
                               col_select = c("PEO0400a","PEO0400b","PEO0400c","PEO0400d"),
                               n_max = 1)

etb18_smallx %>% select(starts_with("PEO0400")) %>% 
  map_dfr(.,~attributes(.x)$label) %>% 
      t(.) %>% data.frame(lab = .) %>% 
      rownames_to_column(.,var = "var") %>% 
  mutate(lab = str_remove(lab,"Familie/Beruf\\: "),
         var = glue::glue("`{var}`")) %>% 
  gt() %>% 
  tab_options(  table.font.size = 12) %>% 
  fmt_markdown(columns = var)


data.frame(pend_small)
```

+ Verwenden Sie `across()`, um die Mittelwerte für alle vier Variablen zu berechnen.
+ Berechnen Sie die Mittelwerte getrennt nach Geschlecht (`zpsex`), indem Sie `group_by()` oder `.by =` verwenden.
+ Fügen Sie auch die Varianz (`var()`) hinzu und nutzen sie `.names=`, um die Spaltennamen nach dem Schema `kennzahl.variable` zu benennen.


[Zurück nach oben](#ue06_3)


### Übung {#fnct}

Verwenden Sie weiterhin `pend_small`:
```{r}
#| eval: false
pend_small
```

```{r}
#| echo: false
data.frame(pend_small)
```

```{r}
#| include: false
#| warning: false
#| message: false
library(gt)
   
haven::read_dta("./orig/PENDDAT_cf_W13.dta",
                       col_select = c("PEO0400a","PEO0400b","PEO0400c","PEO0400d"),n_max = 2)  %>% 
  select(starts_with("PEO0400")) %>% 
  map_dfr(.,~attributes(.x)$label) %>% 
      t(.) %>% data.frame(lab = .) %>% 
      rownames_to_column(.,var = "var") %>% 
  mutate(lab = str_remove(lab,"Familie/Beruf\\: "),
         var = glue::glue("`{var}`")) %>% 
  gt() %>% 
  tab_options(  table.font.size = 12) %>% 
  fmt_markdown(columns = var)


haven::read_dta("./orig/PENDDAT_cf_W13.dta",
                col_select = c("PEO0400a","PEO0400b","PEO0400c","PEO0400d"),n_max = 1) %>% 
  map_dfr(.,~attributes(.x)$labels,.id = "var") %>% 
  pivot_longer(-var) %>%
  pivot_wider(names_from = value,values_from = name) %>%
  select(matches("^1|^2|^3|^4|-10")) %>%
  rename(`-10 bis -1`=`-10`) %>%
  mutate(`-10 bis -1` = "t.n.z./k.A.") %>%
  distinct()


```



+ Standardisieren Sie die Variablen `PEO0400a` - `PEO0400d` aus `pend_small` nach folgendem Muster:
```{r}
#| eval: false
pend_small %>% 
  mutate(std_PEO0400b = (PEO0400b - mean(PEO0400b,na.rm = T))/sd(PEO0400b,na.rm = T))
```
+ Nutzen Sie eine Funktion, um nicht wiederholt die gleichen Schritte einzugeben.
+ Verwenden Sie zusätzlich `across()`, um die Funktion auf die gewünschten Variablen anzuwenden.


[Zurück nach oben](#ue06_4)


### Übung {#ifcase}

+ Bearbeiten Sie `pend_small2`:
```{r}
pend_small2 <- haven::read_dta("./orig/PENDDAT_cf_W13.dta",
                         col_select = c("palter","PEO0400a","PEO0400b","PEO0400c","statakt")) 
pend_small2 <- pend_small2 %>% slice(5624:5640)
pend_small2
```


+ Nutzen Sie `ifelse()`, um Personen ab 50 Jahren mit "ü50" zu kennzeichnen - lassen Sie für Personen bis unter 50 Jahren "u50" eintragen.
+ Führen Sie eine Dreiteilung durch: Personen bis unter 40 bekommen "u40", Personen bis <50 "u50" und Personen über 50 Jahren "ü50". Wie würden Sie mit `case_when()` vorgehen?
+ Nutzen Sie `ifelse()`, um Werte < 0 in den Variablen `PEO0400a`, `PEO0400b`, `PEO0400c` und `statakt` in `pend_small2` mit `NA` zu überschreiben.
+ Schreiben Sie zunächst eine `ifelse()`-Funktion, die für `PEO0400a` alle Werte < 0 mit `NA` überschreibt und ansonsten den Ausgangswert `F1450_01` einsetzt.
+ Wie würde die Funktion aussehen, wenn Sie sie mit `across()` auf `PEO0400a`, `PEO0400b`, `PEO0400c`  und `statakt` gleichzeitig anwenden?

[Zurück nach oben](#ue06_5)


## Anhang

### Klassen bilden mit `cut()`

```{r}
dat3
```

Eine häufig Aufgabe in der Datenaufbereitung die Klassierung eines metrisches Merkmals, wie zum Beispiel die Professorenzahlen.
Wir möchten also `profs` in 150er-Schritten zusammenfassen.
Um die Klassen zu bilden, nutzen wir `cut()` und geben neben der zu unterteilenden Variable mit `breaks` die Klassengrenzen an. Für die Grenzen können wir `seq()` verwenden. 
Darin geben wir zunächst die obere und untere Grenze an und dann die Schrittbreiten. 
```{r}
cut(dat3$profs,breaks = c(50, 200, 350, 500, 650))
cut(dat3$profs,breaks = seq(50,650,150))
```


Diese Werte legen wir in einer neuen Variable im Datensatz `dat3` ab: 
```{r}
dat3$prof_class <- cut(dat3$profs,breaks = seq(50,650,150))
dat3
```
Für diese neue Variable können wir mit `count()` eine Häufigkeitstabelle anfordern:
```{r}
dat3 %>% count(prof_class)
```
```{r}
#| echo: false
n200_350 <-  dat3 %>% count(prof_class) %>% filter(grepl("\\(20",prof_class)) %>% pull(n)
```
`(` bedeutet dabei ausgeschlossen, `]` inklusive. Es gibt also `r n200_350` Unis im Datensatz, die über 200 bis inklusive 350 Professuren unterhalten.


Für die weiteren Beispiele löschen wir die `prof_class` wieder:
```{r}
dat3$prof_class <- NULL
```

**Einige hilfreiche Optionen für `cut()` im Anhang**

```{r}
bsp <- c(1990,1998,2001,2009)
bsp
cut(bsp,breaks = c(1990,2000,2010)) 
# Anzahl der stellen in den labels
cut(bsp,breaks = c(1990,2000,2010),dig.lab = 4) 
# untere Grenze mit einbeziehen
cut(bsp,breaks = c(1990,2000,2010),dig.lab = 4,include.lowest = T) 
# durchnummerieren statt labels:
cut(bsp,breaks = c(1990,2000,2010),labels = FALSE)
# eigene labels angeben:
cut(bsp,breaks = c(1990,2000,2010),labels = c("90er","00er"))
```


### String-Funktionen für *regex*

[{stringr}](https://stringr.tidyverse.org/) stellt eine ganze Reihe an sehr hilfreichen String-Funktionen mit [Regular Expressions](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf) zur Verfügung, einen Überblick bietet das [Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf)

```{r}
dat3 %>% mutate(uni_fh = str_detect(uni,"Uni"))
dat3 %>% mutate(bula = case_when(str_detect(uni,"Bremen")~ "HB",
                                 str_detect(uni,"Oldenb|Vechta")~ "NDS",
                                 str_detect(uni,"Bonn|Aachen")~ "NRW",
                                 str_detect(uni,"Freiburg")~ "BW"
                                 ))
dat3 %>% mutate(ort = str_remove(uni,"Uni |FH |RWTH "))
```
