{
  "hash": "d4206a815dfe81656be09145ef0f396a",
  "result": {
    "markdown": "# Weitere Visualisierungen mit `{ggplot2}` {#viz2}\n\n\n\n\n\nNeben den in [Kapitel 4](#viz) vorgestellten klassischen Grafiken gibt es eine ganze Reihe an Erweiterungen, die `{ggplot2}` \n\n## Karten (\"Choroplethen\") {#map}\n\nFür Karten und Arbeiten mit räumlichen Daten steht das Paket `{sf}` zur Verfügung. \nDas tolle ist: wir können `{sf}`-Daten mit den bekannten  `{tidyverse}` Befehlen bearbeiten. \nUm eine Karte zu erstellen, benötigen wir ein *shapefile*, welches Informationen zu den darzustellenden Gebieten enthält. \nFür Deutschland stellt das [Geodatenzentrum des Bundesamts für Kartographie und Geodäsie](http://gdz.bkg.bund.de/) shapefiles für die Gemeinden, Kreise und Länder zur Verfügung.\n\nDiese shapefiles können wir dann auf Basis der AGS ([Amtlicher Gemeindeschlüssel](https://de.wikipedia.org/wiki/Amtlicher_Gemeindeschl%C3%BCssel)) mit Daten verbinden und dann als Karte darstellen:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15_map_files/figure-html/map1-1.png){width=384}\n:::\n:::\n\n\n\n\nMeist liegen Ergebnisse oder Daten, die wir darstellen möchten auf Basis eines bestimmten Gebietsstands vor (durch Gebietsreformen gibt es kontinuierliche Änderungen sowohl der Gebiete als auch der Kennziffern).\n[Hier](https://daten.gdz.bkg.bund.de/produkte/vg/vg250_ebenen_0101/) finden sich die shapefiles der verschiedenen Jahre.\n\nUm ein shapefile zu laden, installieren wir zunächst `{sf}` und laden es dann mit `library()`. \nDas eigentliche Laden leistet dann der Befehl `read_sf()`, wobei wir neben dem Dateipfad in den entpackten Ordner mit den shapefiles zusätzlich das `layer`, also die Ebene angeben müssen. \nIn den shapefiles des BKG gibt es folgende Layer:\n\n+ `VG250_LAN`: Bundesländer (2-stellige AGS)\n+ `VG250_KRS`: Kreise und kreisfreie Städte (5-stellige AGS)\n+ `VG250_GEM`: Städte und Gemeinden (8-stellige AGS)\n\nWenn wir also die Bundesländer laden möchten gehen wir wie folgt vor:\n\n::: {.cell}\n\n```{.r .cell-code}\ndpath17 <- \"D:/Datenspeicher/regstat/shapefiles/vg250_2017.utm32s.shape.ebenen/vg250_ebenen\"\nlan17 <- sf::read_sf(dpath17, layer=\"VG250_LAN\")\n```\n:::\n\n\nDas Objekt `lan17` können wir nun für einen `ggplot()`-Befehl verwenden.\n`lan17` enthält außerdem die Seegebiete, diese können wir mittels eines `filter()`-Befehls auf die Landgebiete einschränken (`GF` = 4):\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nggplot(lan17) + \n    geom_sf(size = .1)  +\n    labs(title = \"Bundesländer nach Gebietsstand 2017\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](15_map_files/figure-html/mapplot-1.png){width=576}\n:::\n\n```{.r .cell-code}\nggplot(lan17 %>% filter(GF==4)) + \n    geom_sf(size = .1)  +\n    labs(title = \"Bundesländer nach Gebietsstand 2017\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](15_map_files/figure-html/mapplot-2.png){width=576}\n:::\n:::\n\n\n\nMöchten wir nun die Bundesländer bspw. nach der Arbeitslosenquote einfärben, müssen wir diese an die Daten heranspielen. \nDer Einfachheit halber simuliere ich hier die Werte:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalo_df <- \n  data.frame(ags = unique(lan17$AGS),\n             alq = sample(seq(.03,.095,.001) ,size = 16,replace = T))\nhead(alo_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ags   alq\n1  01 0.058\n2  02 0.047\n3  03 0.075\n4  04 0.068\n5  05 0.043\n6  06 0.067\n```\n:::\n:::\n\n\n\n\nJetzt können wir den `alo_df` an das `lan17` shapefile heranspielen mit Hilfe eines [`left_join()`](#join):\n\n::: {.cell}\n\n```{.r .cell-code}\nlan17 %>% filter(GF==4) %>% left_join(alo_df,by = join_by(\"AGS\"==\"ags\")) %>% \n  ggplot() + \n      geom_sf(size = .1, aes(fill = alq))  +\n      labs(title = \"Arbeitslosenquote für Bundesländer\",\n           subtitle = \"(keine echten Daten)\",\n           fill = \"Arbeitslosen-\\nquote\") +\n      scale_fill_viridis_c(option = \"mako\",begin = .1,end = .9) +\n      theme_minimal()\n```\n\n::: {.cell-output-display}\n![](15_map_files/figure-html/mapplot2-1.png){width=480}\n:::\n:::\n\n\n\n## Koeffizientenplots {#modelplot}\n\n### [Übung](#reg4)\n\n\n## Übungen\n\nVerwenden Sie folgenden Subdatensatz des PASS CampusFiles:\n\n::: {.cell}\n\n```{.r .cell-code}\npend_ue08 <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\") %>% \n  filter(welle == 13, netges > 0, azges1 > 0,schul2 > 1, palter > 0)\n```\n:::\n\n\n### Übung 1: Regression {#reg1}\n\n\n+ Erstellen Sie ein Objekt `mod1` mit einem linearen Regressionsmodell (`lm`) mit `netges` (Monatsnetto in EUR) als abhängiger und `azges1` (Arbeitszeit in Stunden) als unabhängiger Variable! (siehe [hier](#lm1))\n+ Betrachten Sie Ergebnisse `mod1` - was können Sie zum Zusammenhang zwischen `netges` und `azges1` erkennen?\n+ Visualisieren Sie Ihr Regressionsmodell mit `{ggplot2}`.\n+ Sehen Sie Ausreißer im Scatterplot? Markieren Sie diese mit Hilfe der Variable `pnr` und `geom_text()`.\n\n",
    "supporting": [
      "15_map_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}