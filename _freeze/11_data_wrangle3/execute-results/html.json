{
  "hash": "b1a0170bb61d1906d19dfe52ef482317",
  "result": {
    "markdown": "# Data Wrangling III {#wrang3}\n\n\n\n\n\n\n## Datensätze verbinden {#join}\n\n> A mutating join allows you to combine variables from two tables. It first matches observations by their keys, then copies across variables from one table to the other.  \n[R for Data Science: Mutating joins](http://r4ds.had.co.nz/relational-data.html#mutating-joins)\n\n\nEin Überblick zu den wichtigsten Befehlen:[^tdyref]\n\n[^tdyref]: Illustrationen mit [tidyexplain](https://github.com/gadenbuie/tidyexplain)\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](11_data_wrangle3_files/figure-html/intial-dfs-1.png){fig-align='center' width=40%}\n:::\n:::\n\n\n<!-- <img src=\"pic/static/png/original-dfs.png\" width=\"480px\" /> -->\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n::: {layout-ncol=3}\n![](pic/inner-join.gif)\n\n![](pic/left-join-extra.gif)\n\n![](pic/full-join.gif) \n:::\n\nEs gibt natürlich auch [`right_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html)  oder [`anti_join()`](https://dplyr.tidyverse.org/reference/filter-joins.html). \nFür eine tiefergehende Einführung lohnt sich das Kapitel [Relational Data](https://r4ds.had.co.nz/relational-data.html#relational-data) aus [R for Data Science](https://r4ds.had.co.nz/).\n\n\nEine sehr hilfreiche Option in den `..._join()` ist die Verbindung unterschiedlicher Variablen.\nBspw. haben wir hier einige Fälle aus der ETB18 und \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nids_df <-  data.frame(pnr = sample(1:9,4),\n                       Bula = c(2,1,14,15))\n\nset.seed(90459)\nalo_bula <- data.frame(bundesland = seq(1:8),\n                       Werte = sample(letters,size = 8) # mit sample() kann eine zufällige Auswahl getroffen werden \n                       )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nids_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   pnr Bula\n#> 1   8    2\n#> 2   5    1\n#> 3   9   14\n#> 4   6   15\n```\n:::\n\n```{.r .cell-code}\nalo_bula\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   bundesland Werte\n#> 1          1     g\n#> 2          2     m\n#> 3          3     n\n#> 4          4     z\n#> 5          5     w\n#> 6          6     r\n#> 7          7     t\n#> 8          8     h\n```\n:::\n\n```{.r .cell-code}\nids_df %>% left_join(alo_bula,by = c(\"Bula\"=\"bundesland\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   pnr Bula Werte\n#> 1   8    2     m\n#> 2   5    1     g\n#> 3   9   14  <NA>\n#> 4   6   15  <NA>\n```\n:::\n:::\n\n\nEin sehr hilfreiche Checkmöglichkeit, die ich häufig verwende:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(ids_df$Bula %in% alo_bula$bundesland)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> FALSE  TRUE \n#>     2     2\n```\n:::\n:::\n\n\n\n### [Übung](#join_ue)\n\n## Reshape: `pivot_longer()` & `pivot_wider()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df <- \n  data.frame(\n    bula    = c(\"NRW\",\"NDS\"),\n    alo2018 = c(2,2),\n    alo2017 = c(1,1)\n    )\n\nbsp_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   bula alo2018 alo2017\n#> 1  NRW       2       1\n#> 2  NDS       2       1\n```\n:::\n:::\n\n\nMit `pivot_longer()` können wir aus einem wide shape `data.frame` einen long shape machen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df %>% pivot_longer(cols = c(\"alo2018\",\"alo2017\"),names_to = \"year\",values_to = \"alo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 3\n#>   bula  year      alo\n#>   <chr> <chr>   <dbl>\n#> 1 NRW   alo2018     2\n#> 2 NRW   alo2017     1\n#> 3 NDS   alo2018     2\n#> 4 NDS   alo2017     1\n```\n:::\n:::\n\n\nMit `names_prefix = \"alo\"` können wir das `alo` direkt löschen lassen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df %>% pivot_longer(cols = c(\"alo2018\",\"alo2017\"),names_to = \"year\",values_to = \"alo\",names_prefix = \"alo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 3\n#>   bula  year    alo\n#>   <chr> <chr> <dbl>\n#> 1 NRW   2018      2\n#> 2 NRW   2017      1\n#> 3 NDS   2018      2\n#> 4 NDS   2017      1\n```\n:::\n:::\n\n\nMit `pivot_wider()` können wir den umgekehrten Weg gehen:\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df2 <- \n  data.frame(land = c(\"NRW\",\"NDS\",\"NRW\",\"NDS\"),\n             alo = c(2.1,1.8,2.4,2.2),\n             alter = c(\"age_1825\",\"age_1825\",\"age_2630\",\"age_2630\"))\nbsp_df2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   land alo    alter\n#> 1  NRW 2.1 age_1825\n#> 2  NDS 1.8 age_1825\n#> 3  NRW 2.4 age_2630\n#> 4  NDS 2.2 age_2630\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df2 %>% pivot_wider(names_from = alter,values_from = alo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 2 × 3\n#>   land  age_1825 age_2630\n#>   <chr>    <dbl>    <dbl>\n#> 1 NRW        2.1      2.4\n#> 2 NDS        1.8      2.2\n```\n:::\n:::\n\n\n\n## Übungen\n\n### Übung 1 {#join_ue}\nVerknüpfen Sie die ausgewählten Beobachtungen des PASS CF mit der Haushalts-Information, in welcher Region (`region`) die Befragten wohnen.\nMergen Sie dazu die `hnr` aus `p_register_cf_W13.dta` basiernd auf der `pnr` und mergen dann die `region` basierend auf der `hnr` und `welle`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_ue11 <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",\n                             col_select = c(\"pnr\",\"welle\")) %>%\n  slice(1:10)\n\npend_ue11\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 10 × 2\n#>           pnr welle                  \n#>         <dbl> <dbl+lbl>              \n#>  1 1000001901 1 [Welle 1 (2006/2007)]\n#>  2 1000001902 1 [Welle 1 (2006/2007)]\n#>  3 1000001901 3 [Welle 3 (2008/2009)]\n#>  4 1000002001 1 [Welle 1 (2006/2007)]\n#>  5 1000002002 1 [Welle 1 (2006/2007)]\n#>  6 1000002002 2 [Welle 2 (2007/2008)]\n#>  7 1000002001 2 [Welle 2 (2007/2008)]\n#>  8 1000002002 3 [Welle 3 (2008/2009)]\n#>  9 1000002001 3 [Welle 3 (2008/2009)]\n#> 10 1000002001 4 [Welle 4 (2010)]\n```\n:::\n\n```{.r .cell-code}\nhh_dat <- haven::read_dta(\"./orig/HHENDDAT_cf_W13.dta\", col_select = c(\"hnr\",\"welle\",\"region\"))\np_reg <- haven::read_dta(\"./orig/p_register_cf_W13.dta\", col_select = c(\"pnr\",\"hnr\"))\n```\n:::\n\n\n\n\n\n### Übung 2 {#pivot_ue}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_ue11b <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",\n                             col_select = c(\"pnr\",\"welle\",\"famstand\")) %>%\n  slice(200:210) %>% \n  filter(welle %in% 2:3)\n\n\npend_ue11b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 6 × 3\n#>          pnr welle                   famstand                                   \n#>        <dbl> <dbl+lbl>               <dbl+lbl>                                  \n#> 1 1000014501 2 [Welle 2 (2007/2008)] -4 [Frage irrtuemlich nicht gestellt]      \n#> 2 1000014501 3 [Welle 3 (2008/2009)]  3 [Verheiratet/eing. Lebensp., getr. lebd…\n#> 3 1000014701 2 [Welle 2 (2007/2008)]  2 [Verheiratet/eing. Lebensp., zus. lebd.]\n#> 4 1000014702 2 [Welle 2 (2007/2008)]  2 [Verheiratet/eing. Lebensp., zus. lebd.]\n#> 5 1000014702 3 [Welle 3 (2008/2009)]  2 [Verheiratet/eing. Lebensp., zus. lebd.]\n#> 6 1000014701 3 [Welle 3 (2008/2009)]  2 [Verheiratet/eing. Lebensp., zus. lebd.]\n```\n:::\n:::\n\n\nBringen Sie `pend_ue11b` in das long shape:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 3 × 3\n#>          pnr `2`                                         `3`                    \n#>        <dbl> <dbl+lbl>                                   <dbl+lbl>              \n#> 1 1000014501 -4 [Frage irrtuemlich nicht gestellt]       3 [Verheiratet/eing. L…\n#> 2 1000014701  2 [Verheiratet/eing. Lebensp., zus. lebd.] 2 [Verheiratet/eing. L…\n#> 3 1000014702  2 [Verheiratet/eing. Lebensp., zus. lebd.] 2 [Verheiratet/eing. L…\n```\n:::\n:::\n\n\nTipp: mit `,names_prefix = \"wave\"` in `pivot_wider()` können wir ein Präfix angeben:\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 3 × 3\n#>          pnr wave2                                       wave3                  \n#>        <dbl> <dbl+lbl>                                   <dbl+lbl>              \n#> 1 1000014501 -4 [Frage irrtuemlich nicht gestellt]       3 [Verheiratet/eing. L…\n#> 2 1000014701  2 [Verheiratet/eing. Lebensp., zus. lebd.] 2 [Verheiratet/eing. L…\n#> 3 1000014702  2 [Verheiratet/eing. Lebensp., zus. lebd.] 2 [Verheiratet/eing. L…\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}