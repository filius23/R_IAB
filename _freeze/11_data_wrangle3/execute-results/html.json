{
  "hash": "9bb63025f9cef63d0ede659a37933233",
  "result": {
    "markdown": "# Data Wrangling III {#wrang3}\n\n\n\n\n\n\n## Datensätze verbinden {#join}\n\n> A mutating join allows you to combine variables from two tables. It first matches observations by their keys, then copies across variables from one table to the other.  \n[R for Data Science: Mutating joins](http://r4ds.had.co.nz/relational-data.html#mutating-joins)\n\n\nEin Überblick zu den wichtigsten Befehlen:[^tdyref]\n\n[^tdyref]: Illustrationen mit [tidyexplain](https://github.com/gadenbuie/tidyexplain)\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](11_data_wrangle3_files/figure-html/intial-dfs-1.png){fig-align='center' width=40%}\n:::\n:::\n\n\n<!-- <img src=\"pic/static/png/original-dfs.png\" width=\"480px\" /> -->\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n::: {layout-ncol=3}\n![](pic/inner-join.gif)\n\n![](pic/left-join-extra.gif)\n\n![](pic/full-join.gif) \n:::\n\nEs gibt natürlich auch [`right_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html)  oder [`anti_join()`](https://dplyr.tidyverse.org/reference/filter-joins.html). \nFür eine tiefergehende Einführung lohnt sich das Kapitel [Relational Data](https://r4ds.had.co.nz/relational-data.html#relational-data) aus [R for Data Science](https://r4ds.had.co.nz/).\n\n\nEine sehr hilfreiche Option in den `..._join()` ist die Verbindung unterschiedlicher Variablen.\nBspw. haben wir hier einige Fälle aus der ETB18 und \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nids_df <-  data.frame(pnr = sample(1:9,4),\n                       Bula = c(2,1,14,15))\n\nset.seed(90459)\nalo_bula <- data.frame(bundesland = seq(1:8),\n                       Werte = sample(letters,size = 8) # mit sample() kann eine zufällige Auswahl getroffen werden \n                       )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nids_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   pnr Bula\n#> 1   1    2\n#> 2   7    1\n#> 3   9   14\n#> 4   5   15\n```\n:::\n\n```{.r .cell-code}\nalo_bula\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   bundesland Werte\n#> 1          1     g\n#> 2          2     m\n#> 3          3     n\n#> 4          4     z\n#> 5          5     w\n#> 6          6     r\n#> 7          7     t\n#> 8          8     h\n```\n:::\n\n```{.r .cell-code}\nids_df %>% left_join(alo_bula,by = c(\"Bula\"=\"bundesland\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   pnr Bula Werte\n#> 1   1    2     m\n#> 2   7    1     g\n#> 3   9   14  <NA>\n#> 4   5   15  <NA>\n```\n:::\n:::\n\n\nEin sehr hilfreiche Checkmöglichkeit, die ich häufig verwende:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(ids_df$Bula %in% alo_bula$bundesland)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> FALSE  TRUE \n#>     2     2\n```\n:::\n:::\n\n\n\n### [Übung](#join_ue)\n\n## Reshape: `pivot_longer()` & `pivot_wider()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df <- \n  data.frame(\n    bula    = c(\"NRW\",\"NDS\"),\n    alo2018 = c(2,2),\n    alo2017 = c(1,1)\n    )\n\nbsp_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   bula alo2018 alo2017\n#> 1  NRW       2       1\n#> 2  NDS       2       1\n```\n:::\n:::\n\n\nMit `pivot_longer()` können wir aus einem wide shape `data.frame` einen long shape machen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df %>% pivot_longer(cols = c(\"alo2018\",\"alo2017\"),names_to = \"year\",values_to = \"alo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 3\n#>   bula  year      alo\n#>   <chr> <chr>   <dbl>\n#> 1 NRW   alo2018     2\n#> 2 NRW   alo2017     1\n#> 3 NDS   alo2018     2\n#> 4 NDS   alo2017     1\n```\n:::\n:::\n\n\nMit `names_prefix = \"alo\"` können wir das `alo` direkt löschen lassen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df %>% pivot_longer(cols = c(\"alo2018\",\"alo2017\"),names_to = \"year\",values_to = \"alo\",names_prefix = \"alo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 3\n#>   bula  year    alo\n#>   <chr> <chr> <dbl>\n#> 1 NRW   2018      2\n#> 2 NRW   2017      1\n#> 3 NDS   2018      2\n#> 4 NDS   2017      1\n```\n:::\n:::\n\n\nMit `pivot_wider()` können wir den umgekehrten Weg gehen:\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df2 <- \n  data.frame(land = c(\"NRW\",\"NDS\",\"NRW\",\"NDS\"),\n             alo = c(2.1,1.8,2.4,2.2),\n             alter = c(\"age_1825\",\"age_1825\",\"age_2630\",\"age_2630\"))\nbsp_df2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   land alo    alter\n#> 1  NRW 2.1 age_1825\n#> 2  NDS 1.8 age_1825\n#> 3  NRW 2.4 age_2630\n#> 4  NDS 2.2 age_2630\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df2 %>% pivot_wider(names_from = alter,values_from = alo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 2 × 3\n#>   land  age_1825 age_2630\n#>   <chr>    <dbl>    <dbl>\n#> 1 NRW        2.1      2.4\n#> 2 NDS        1.8      2.2\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n## Übungen\n\n### Übung 1 {#join_ue}\nVerknüpfen Sie die ausgewählten Beobachtungen der ETB 2018 mit [Arbeitsmarktstatistiken](https://www.regionalstatistik.de/genesis//online?operation=table&code=AI008-1) von Destatis.\nLesen die ETB mit folgendem Befehl ein:\n\n<!-- ```{r jnue} -->\n<!-- #| eval: false -->\n<!-- etb_ue11 <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\", -->\n<!--                        col_select = c(\"intnr\",\"int_jahr\",\"Bula\")) %>%  -->\n<!--   slice(34:35,68:69,62,687,625,684,599:600) -->\n<!-- etb_ue11 -->\n<!-- ``` -->\n\n<!-- So können Sie die aufbereiteten Arbeitslosendaten einlesen (die Zahlencodes in beiden Datensätzen stimmen überein): -->\n<!-- ```{r jndat1} -->\n<!-- alo <- readRDS(file = \"./data/alo_bula1.Rdata\") -->\n<!-- alo -->\n<!-- ``` -->\n\n<!-- Wie müssten Sie vorgehen, wenn Sie nun jahresgenaue Angaben haben und dementsprechend zusätzlich auch nach dem Jahr mergen möchten? -->\n<!-- ```{r jndat2} -->\n<!-- alo_j <- readRDS(file = \"./data/alo_bula1_jahr.Rdata\") -->\n<!-- alo_j -->\n<!-- ``` -->\n\n\n\n### Übung 2 {#pivot_ue}\n\n<!-- ```{r uepvit} -->\n<!-- alo_wide <- readRDS(file = \"./data/alo_bula2.Rdata\") -->\n<!-- alo_wide -->\n<!-- ``` -->\n\n<!-- Bringen Sie `alo_wide` in das long shape: -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n<!-- alo_wide %>% pivot_longer(cols = 3:4,names_to = \"jahr\",values_to = \"alo_quote\",names_prefix = \"alo_\") -->\n<!-- ``` -->\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}