{
  "hash": "043f62f76080ff62078e8ca262c1267d",
  "result": {
    "markdown": "# Einen Überblick erhalten {#tab}\n\n\n\n\n\nNachdem wir Datensätze importiert haben, wollen wir nun einen Überblick erhalten. Jede statistische Auswertung startet mit einer Beschreibung der Variablen. In dieser Session werden wir sehen, wie wir uns mit Tabellen einen Überblick über die Informationen in einem Datensatz verschaffen können. Wir werden auch in dieser Session mit dem ETB2018 arbeiten. Wir starten also mit dem Einlesen der Daten:\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"haven\") # falls nicht schon installiert \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven) # datenimport für stata-datensätze\nlibrary(tidyverse) # tidyverse\npend <- read_dta(\"./orig/PENDDAT_cf_W13.dta\")\n```\n:::\n\n\n## Häufigkeitsauszählungen\n\nUns stehen verschiedene Befehle zur Verfügung, um eine Häufigkeitsauszählung zu erstellen:\n\n+ `table()`\n+ `count()` aus `{dplyr}`\n\n\nEinfachster Befehl für die Auszählung von Häufigkeiten ist der `table()` Befehl. Beispielsweise mit der Variable `statakt` zur Ausbildung der Befragten.\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n -10   -9   -5    1    2    3 \n3765 3289  280 9470 6139 5481 \n```\n:::\n:::\n\nWir bekommen hier die absoluten Häufigkeiten angezeigt. In der ersten Zeile werden die verschiedenen Ausprägungen aufgelistet, in der zweiten Zeile stehen dann die Häufigkeiten. \n\nAllerdings werden sowohl für `table()` die Labels in der Ausgabe erstmal ignoriert. \nMit `as_factor()` aus dem Paket `{haven}` können wir die Labels aus dem Datensatz abrufen und die numerischen Werte mit den Labels überschreiben. \nDer `table()` zeigt dann die Labels als Beschriftungen an:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(as_factor(pend$statakt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nItem fuer Fragebogenversion nicht relevant \n                                      3765 \n               Item in Welle nicht erhoben \n                                      3289 \n   Generierung nicht mgl. (fehlende Werte) \n                                       280 \n                             Erwerbstaetig \n                                      9470 \n        Arbeitslos (Gemeldet und sonstige) \n                                      6139 \n                                   Inaktiv \n                                      5481 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n9470 Befragte sind erwerbstätig, 5481 Befragte sind inaktiv usw. (Zu labels und die Arbeit mit value labels in R später mehr)\n\nMit `count()` aus `{dplyr}` bekommen wir die labels direkt angezeigt, auch hier verwenden wir wieder die Schreibweise [mit der Pipe `%>%`](#pipe):\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  statakt                                              n\n  <dbl+lbl>                                        <int>\n1 -10 [Item fuer Fragebogenversion nicht relevant]  3765\n2  -9 [Item in Welle nicht erhoben]                 3289\n3  -5 [Generierung nicht mgl. (fehlende Werte)]      280\n4   1 [Erwerbstaetig]                               9470\n5   2 [Arbeitslos (Gemeldet und sonstige)]          6139\n6   3 [Inaktiv]                                     5481\n```\n:::\n:::\n\n\n\nWir können auch Tabellen unter einem frei wählbaren Namen ablegen und später wieder aufrufen:\n\n::: {.cell}\n\n```{.r .cell-code}\nt1 <- table(pend$statakt)\nt2 <- pend %>% count(statakt)\n```\n:::\n\n\nWir sehen hier, dass die Tabelle mit `xtabs()` eine neue Objektform ist, ein table. Mit `count()` wird hingegen ein `data.frame` erstellt.\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(t1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"table\"\n```\n:::\n\n```{.r .cell-code}\nclass(t2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n## Fehlende Werte in R: `NA` {#NA03}\n\nEtwas störend sind aber die negativen Werte.\n\nUm die Werte wie `-5` auch in R als fehlende Angabe zu kennzeichnen, müssen wir sie in `pend` auf `NA` setzen. \nDazu rufen wir `pend$statakt` auf und filtern mit `[]` nur die Werte für `statakt` gleich `-1` heraus. Im vorherigen Kapitel haben wir kennengelernt, dass wir so spezifische Werte aufrufen können:\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt == -5] # nur statakt = -5 aufrufen\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<labelled<double>[280]>: Aktueller Hauptstatus, generiert (ab Welle 2)\n  [1] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n [26] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n [51] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n [76] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[101] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[126] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[151] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[176] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[201] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[226] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[251] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[276] -5 -5 -5 -5 -5\n\nLabels:\n value                                      label\n   -10 Item fuer Fragebogenversion nicht relevant\n    -9                Item in Welle nicht erhoben\n    -5    Generierung nicht mgl. (fehlende Werte)\n     1                              Erwerbstaetig\n     2         Arbeitslos (Gemeldet und sonstige)\n     3                                    Inaktiv\n```\n:::\n:::\n\n(Hier bekommen wir nochmal die Labels ausgespuckt, was etwas suboptimal für die Übersichtlichkeit ist.)\n\nWenn wir daran mit `<-` einen neuen Wert angeben, werden die aufgerufenen Werte damit überschrieben - hier überschreiben wir also alle Werte für `statakt == -1` mit `NA`: \n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt == -5]  <- NA\n```\n:::\n\n\n`NA` ist in der R der Code für fehlende Angaben, sie werden dann in `table()` nicht aufgeführt:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n -10   -9    1    2    3 \n3765 3289 9470 6139 5481 \n```\n:::\n:::\n\nWir können aber mit der Option `exclude = NULL` die Auszählung von `NA` explizit anfordern:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt,exclude = NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n -10   -9    1    2    3 <NA> \n3765 3289 9470 6139 5481  280 \n```\n:::\n:::\n\n\nAllerdings haben wir ja jetzt noch nicht alle negativen Werte überschrieben, die `-10` und `-9` fehlen noch.\nNatürlich wäre es so etwas möglich, aber etwas umständlich:\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt == -9 ]  <- NA\npend$statakt[pend$statakt == -10]  <- NA\n```\n:::\n\n\nStattdessen können wir den `%in%`-Operator verwenden, den wir schon im Zusammenhang mit [`filter()`](#filter) kennengelernt hatten - alternativ klappt für die PASS-Daten auch `< 0`, weil alle Missing-Codes kleiner 0 sind:\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt %in% c(-9,-10)]  <- NA\npend$statakt[pend$statakt < 0 ]  <- NA\n```\n:::\n\n\nDamit sind wir für `statakt` am Ziel:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3 \n9470 6139 5481 \n```\n:::\n\n```{.r .cell-code}\ntable(pend$statakt,exclude = NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3 <NA> \n9470 6139 5481 7334 \n```\n:::\n:::\n\n\n\n\nIn `count()` wird `NA` auch mit ausgezählt:\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  statakt                                     n\n  <dbl+lbl>                               <int>\n1  1 [Erwerbstaetig]                       9470\n2  2 [Arbeitslos (Gemeldet und sonstige)]  6139\n3  3 [Inaktiv]                             5481\n4 NA                                       7334\n```\n:::\n:::\n\nMöchten wir das umgehen, nehmen wir wieder `filter()` zu Hilfe - mit `is.na()` können wir `NA` identifizieren. Durch Voranstellen von `!` können wir damit anfordern, dass alle nicht-`NA`-Werte mit `TRUE` behalten werden:\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% filter(!is.na(statakt)) %>% count(statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  statakt                                    n\n  <dbl+lbl>                              <int>\n1 1 [Erwerbstaetig]                       9470\n2 2 [Arbeitslos (Gemeldet und sonstige)]  6139\n3 3 [Inaktiv]                             5481\n```\n:::\n:::\n\n\nMehr zu fehlenden Werten findet sich beispielsweise im [**The missing book**](https://tmb.njtierney.com/) von Nicholas Tierney & Allison Horst.\n\n### [Übung](#descue1) {#ue3_1}\n\n\n\n\n## Andere Tabellenwerte\n\nMit Hilfe weiterer Funktionen können wir die Häufigkeitstabellen jeweils anpassen:\n\n+ `prop.table()`: relative Werte/Anteile\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt) %>% prop.table(.) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n        1         2         3 \n0.4490280 0.2910858 0.2598862 \n```\n:::\n:::\n\n29.109% aller Befragten sind arbeitslos.\n\n+ `cumsum()`: kumulierte Werte\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt) %>% cumsum(.)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    1     2     3 \n 9470 15609 21090 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n15609 Befragte sind erwerbstätig oder sind arbeitslos.\n\n\n+ `prop.table()` mit `cumsum()`: kumulierte relative Häufigkeiten\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt) %>% prop.table() %>% cumsum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        1         2         3 \n0.4490280 0.7401138 1.0000000 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n74.011% aller Befragten sind erwerbstätig oder arbeitslos (und nicht inaktiv).\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## Mehrere Kennzahlen in einer Tabelle\n\nAus Stata kennen viele sicherlich folgende Ansicht mit `tab statakt`:\n\n::: {.cell collectcode='false'}\n::: {.cell-output .cell-output-stdout}\n```\n   Aktueller Hauptstatus, generiert (ab |\n                               Welle 2) |      Freq.     Percent        Cum.\n----------------------------------------+-----------------------------------\n                          Erwerbstaetig |      9,470       33.32       33.32\n     Arbeitslos (Gemeldet und sonstige) |      6,139       21.60       54.91\n                                Inaktiv |      5,481       19.28       74.20\n                                      . |      7,334       25.80      100.00\n----------------------------------------+-----------------------------------\n                                  Total |     28,424      100.00\n```\n:::\n:::\n\nStandardmäßig ein `table()` oder `count()` immer nur eine Art von Kennzahlen. \nDa wir aber mit `count()` die Auszählungen als `data.frame()` erhalten, können wir die relativen und kumulierten Häufigkeiten einfach als neue Variablen anfügen. \n\nDazu verwenden wir `dat1$var <- ....`, das wir im vorherigen Kapitel kennen gelernt hatten. \nUm also eine neue Spalte `pct`in unseren `data.frame` mit den Auszählungen einzufügen gehen wir wie folgt vor:\n+ Zuerst erstellen wir einen `data.frame` mit der Auszählung mit Hilfe von `count()`\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_statakt <- pend %>% count(statakt) # ausgangsbefehl\ntab_statakt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  statakt                                     n\n  <dbl+lbl>                               <int>\n1  1 [Erwerbstaetig]                       9470\n2  2 [Arbeitslos (Gemeldet und sonstige)]  6139\n3  3 [Inaktiv]                             5481\n4 NA                                       7334\n```\n:::\n:::\n\n\n\n+ Dann fügen wir eine neue Spalte für die relativen Häufigkeiten hinzu, welche mit `prop.table()` berechnet werden:\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_statakt$pct <- prop.table(tab_statakt$n)\ntab_statakt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  statakt                                     n   pct\n  <dbl+lbl>                               <int> <dbl>\n1  1 [Erwerbstaetig]                       9470 0.333\n2  2 [Arbeitslos (Gemeldet und sonstige)]  6139 0.216\n3  3 [Inaktiv]                             5481 0.193\n4 NA                                       7334 0.258\n```\n:::\n:::\n\n\nWenn wir jetzt noch die kumulierten Häufigkeiten erstellen möchten, dann können wir `cumsum()` auf `pct` anwenden:\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_statakt$Cum <- cumsum(tab_statakt$pct)\n```\n:::\n\n\nEtwas störend ist aber noch das `NA`, die für fehlende Angaben steht und nicht berücksichtigt werden soll.\nDas können wir einfach `!is.na()` in `filter()` ausschließen:\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_statakt2 <- pend %>% filter(!is.na(statakt)) %>% count(statakt) \ntab_statakt2$pct <- prop.table(tab_statakt2$n)\ntab_statakt2$Cum <- cumsum(tab_statakt2$pct)\ntab_statakt2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  statakt                                    n   pct   Cum\n  <dbl+lbl>                              <int> <dbl> <dbl>\n1 1 [Erwerbstaetig]                       9470 0.449 0.449\n2 2 [Arbeitslos (Gemeldet und sonstige)]  6139 0.291 0.740\n3 3 [Inaktiv]                             5481 0.260 1    \n```\n:::\n:::\n\n\n:::\n\n## Kontingenztabellen\n\nAus Kontingenztabellen erfahren wir, wie häufig Merkmalskombinationen auftreten. Auch für Kontingenztabellen können wir `table()` verwenden. Zum Beispiel können wir uns eine Tabelle anzeigen lassen, die uns die Häufigkeiten des Erwerbsstatus getrennt nach Geschlechtern zeigt:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n       1    2    3\n  1 4685 3240 2047\n  2 4785 2899 3434\n```\n:::\n:::\n\n\nWir erkennen aus dieser Tabelle beispielsweise, dass 3434 Befragte weiblich (`zpsex=2`) und inaktiv (`statakt = 3`) sind.\n\nMit `addmargins()` können wir die Tabelle um die Summenwerte erweitern:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt) %>% addmargins()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     \n          1     2     3   Sum\n  1    4685  3240  2047  9972\n  2    4785  2899  3434 11118\n  Sum  9470  6139  5481 21090\n```\n:::\n:::\n\n\n\nMöchten wir jetzt die relativen Häufigkeiten, dann wenden wir wieder `prop.table()` an:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt) %>% prop.table()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n             1          2          3\n  1 0.22214320 0.15362731 0.09706022\n  2 0.22688478 0.13745851 0.16282598\n```\n:::\n:::\n\nFür Zeilenprozente benötigen wir die zusätzliche Option `margin = 1`:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt) %>% prop.table(margin = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n            1         2         3\n  1 0.4698155 0.3249097 0.2052748\n  2 0.4303832 0.2607483 0.3088685\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n>  30.89% der weiblichen Befragten (`zpsex=2`) sind inaktiv (`statakt = 3`).\n\n\nFür Zeilenprozente dann `margin = 2`:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt) %>% prop.table(margin = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n            1         2         3\n  1 0.4947202 0.5277733 0.3734720\n  2 0.5052798 0.4722267 0.6265280\n```\n:::\n:::\n\n\n> 62.65% der inaktiven Befragten (`statakt = 3`) sind weiblich (`zpsex=2`).\n\n\nÜbrigens funktioniert auch hier `addmargins()`:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt) %>% prop.table(margin = 2) %>% addmargins()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     \n              1         2         3       Sum\n  1   0.4947202 0.5277733 0.3734720 1.3959654\n  2   0.5052798 0.4722267 0.6265280 1.6040346\n  Sum 1.0000000 1.0000000 1.0000000 3.0000000\n```\n:::\n:::\n\n\nFür eine Kontingenztabelle mit `count()` geben wir einfach die Variablen in `count()` an. Das Ergebnis wird immer im \"long shape\" Format ausgegeben:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(zpsex,statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n  zpsex         statakt                                     n\n  <dbl+lbl>     <dbl+lbl>                               <int>\n1 1 [Maennlich]  1 [Erwerbstaetig]                       4685\n2 1 [Maennlich]  2 [Arbeitslos (Gemeldet und sonstige)]  3240\n3 1 [Maennlich]  3 [Inaktiv]                             2047\n4 1 [Maennlich] NA                                       3555\n5 2 [Weiblich]   1 [Erwerbstaetig]                       4785\n6 2 [Weiblich]   2 [Arbeitslos (Gemeldet und sonstige)]  2899\n7 2 [Weiblich]   3 [Inaktiv]                             3434\n8 2 [Weiblich]  NA                                       3779\n```\n:::\n:::\n\n\nHier ist `count()` informativer als `table()`. Hier werden die Labels verwendet. Der Übersichtlichkeit halber verwende ich meistens `count()`, auch wenn das *long shape* Format etwas gewöhnungsbedürftig ist. \n\n\n### [Übung](#descue2) {#ue3_2}\n\n::: {.callout-tip collapse=true}\n# Bei langen Tabellen gibt `count()` nicht alle Zeilen aus\n\nBei langen Tabellen werden nicht alle Werte ausgegeben, sondern nur die ersten Zeilen. Um hier alle Werte zu bekommen, hilft `print(n=Inf)`:\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(palter) # wird abgeschnitten\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 84 × 2\n   palter                n\n   <dbl+lbl>         <int>\n 1 -2 [Keine Angabe]    60\n 2 14                    1\n 3 15                  271\n 4 16                  308\n 5 17                  276\n 6 18                  282\n 7 19                  266\n 8 20                  296\n 9 21                  282\n10 22                  330\n# … with 74 more rows\n```\n:::\n\n```{.r .cell-code}\npend %>% count(palter) %>% print(n=Inf) # alle Werte werden gezeigt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 84 × 2\n   palter                n\n   <dbl+lbl>         <int>\n 1 -2 [Keine Angabe]    60\n 2 14                    1\n 3 15                  271\n 4 16                  308\n 5 17                  276\n 6 18                  282\n 7 19                  266\n 8 20                  296\n 9 21                  282\n10 22                  330\n11 23                  338\n12 24                  325\n13 25                  371\n14 26                  401\n15 27                  438\n16 28                  460\n17 29                  449\n18 30                  502\n19 31                  495\n20 32                  502\n21 33                  515\n22 34                  513\n23 35                  511\n24 36                  500\n25 37                  474\n26 38                  504\n27 39                  484\n28 40                  517\n29 41                  521\n30 42                  526\n31 43                  536\n32 44                  540\n33 45                  552\n34 46                  610\n35 47                  604\n36 48                  600\n37 49                  585\n38 50                  601\n39 51                  621\n40 52                  597\n41 53                  598\n42 54                  615\n43 55                  575\n44 56                  566\n45 57                  561\n46 58                  618\n47 59                  589\n48 60                  568\n49 61                  512\n50 62                  507\n51 63                  534\n52 64                  469\n53 65                  438\n54 66                  424\n55 67                  376\n56 68                  326\n57 69                  316\n58 70                  291\n59 71                  259\n60 72                  239\n61 73                  212\n62 74                  188\n63 75                  177\n64 76                  134\n65 77                  126\n66 78                  119\n67 79                   96\n68 80                   74\n69 81                   62\n70 82                   54\n71 83                   48\n72 84                   40\n73 85                   26\n74 86                   27\n75 87                   23\n76 88                   15\n77 89                   11\n78 90                   12\n79 91                   11\n80 92                    9\n81 93                    7\n82 94                    4\n83 95                    2\n84 97                    2\n```\n:::\n:::\n\n\n\n:::\n\n##  Lage- & Konzentrationsmaße \n\nLagemaße sind statische Kennzahlen zur Beschreibung von metrischen Variablen, wie beispielsweise das arithmetische Mittel oder der Median. Einen Überblick bietet `summary()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pend$netges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n    -5.0     -3.0     -3.0    567.9    990.0 111419.0 \n```\n:::\n:::\n\n\nAllerdings gibt es im Datensatz natürlich keine Befragten mit einem Bruttoverdienst von -5.0 EUR. \nWerte kleiner Null sind Zahlencodes für *keine Angabe*:\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"hxvzuguksj\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#hxvzuguksj .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 10px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#hxvzuguksj .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hxvzuguksj .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hxvzuguksj .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#hxvzuguksj .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hxvzuguksj .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hxvzuguksj .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hxvzuguksj .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hxvzuguksj .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#hxvzuguksj .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hxvzuguksj .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hxvzuguksj .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hxvzuguksj .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hxvzuguksj .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hxvzuguksj .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#hxvzuguksj .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#hxvzuguksj .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hxvzuguksj .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#hxvzuguksj .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hxvzuguksj .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#hxvzuguksj .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hxvzuguksj .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hxvzuguksj .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hxvzuguksj .gt_left {\n  text-align: left;\n}\n\n#hxvzuguksj .gt_center {\n  text-align: center;\n}\n\n#hxvzuguksj .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hxvzuguksj .gt_font_normal {\n  font-weight: normal;\n}\n\n#hxvzuguksj .gt_font_bold {\n  font-weight: bold;\n}\n\n#hxvzuguksj .gt_font_italic {\n  font-style: italic;\n}\n\n#hxvzuguksj .gt_super {\n  font-size: 65%;\n}\n\n#hxvzuguksj .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#hxvzuguksj .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#hxvzuguksj .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#hxvzuguksj .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#hxvzuguksj .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#hxvzuguksj .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#hxvzuguksj .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"name\">name</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"value\">value</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Item fuer Fragebogenversion nicht relevant</td>\n<td headers=\"value\" class=\"gt_row gt_right\">-10</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Item in Welle nicht erhoben</td>\n<td headers=\"value\" class=\"gt_row gt_right\">-9</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Generierung nicht mgl. (fehlende Werte)</td>\n<td headers=\"value\" class=\"gt_row gt_right\">-5</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Trifft nicht zu (Filter)</td>\n<td headers=\"value\" class=\"gt_row gt_right\">-3</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nUm aussagekräftige Werte zu bekommen, müssen wir diese Werte mit `NA` überschreiben:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npend$netges[pend$netges < 0 ] <- NA # missings überschreiben\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pend$netges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n      0     880    1320    1562    1890  111419   18056 \n```\n:::\n:::\n\n\n\nWir können aber auch bestimmte Kennzahlen anfordern sehen uns die Bruttoverdienste der Befragten zu beschreiben:\n\n+ Minimum und Maximum: `min()`, `max()`\n+ arithm. Mittel: `mean()`\n+ Median: `median()`\n+ Quantile: `quantile()`\n+ Varianz: `var()`\n+ Standardabweichung: `sd()`\n+ Gini-Koeffizient: `Gini` aus dem Paket `{ineq}`\n\n\nWenn eine Variable `NA` enthält, müssen diese explizit ignoriert werden - ansonsten wird nur `NA` ausgegeben:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(pend$netges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\nDeshalb müssen wir die Option `na.rm = T` angeben:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(pend$netges,na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1562.3\n```\n:::\n:::\n\n\nEin Quantil einer Verteilung trennt die Daten so in zwei Teile, dass `x`\\% der Daten darunter und 100-`x`\\% darüber liegen. Mit `quantile()`wir durch Angabe in der Option `probs =` beliebige Quantilgrenzen anfordern, zB. für die 40%-Quantilgrenze:  \n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(pend$netges,probs = .4, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 40% \n1125 \n```\n:::\n:::\n\n\nDen [Gini-Koeffizienten](#gini_graph) können wir mit `Gini()` aus dem Paket `ineq` berechnen:\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ineq\") # einmal installieren\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ineq) # ineq laden\nGini(pend$netges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3560557\n```\n:::\n:::\n\n\n\n### Kennzahlentabelle mit `summarise`\n\nMit Hilfe von `summarise()` aus `{dplyr}` können wir ein eigenes `summary()` bauen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% summarise(Minimum = min(netges,na.rm = T),\n                    Median = median(netges,na.rm = T),\n                    Mittelwert = mean(netges,na.rm = T),\n                    Maximum = max(netges,na.rm = T),\n                    Gini = Gini(netges))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n  Minimum   Median Mittelwert Maximum    Gini\n  <dbl+lbl>  <dbl>      <dbl> <dbl+lbl> <dbl>\n1 0           1320      1562. 111419    0.356\n```\n:::\n:::\n\n\n\nDer Vorteil des Ganzen wird im nächsten Schritt klarer.\n\n### Lage- und Streuungsmaße vergleichen\n\n\nHäufig werden diese Kennzahlen erst im Vergleich richtig spannend.   \nDafür hilft uns das Argument `.by =` in `summarise()`:\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% summarise(Minimum = min(netges,na.rm = T),\n                    Median = median(netges,na.rm = T),\n                    Mittelwert = mean(netges,na.rm = T),\n                    Maximum = max(netges,na.rm = T),\n                    Gini = Gini(netges),\n                   .by = welle)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 6\n   welle                    Minimum   Median Mittelwert Maximum    Gini\n   <dbl+lbl>                <dbl+lbl>  <dbl>      <dbl> <dbl+lbl> <dbl>\n 1  1 [Welle 1 (2006/2007)] 1          1200       1525. 111419    0.416\n 2  3 [Welle 3 (2008/2009)] 0          1298.      1498.  12000    0.349\n 3  2 [Welle 2 (2007/2008)] 0          1320       1529.   7200    0.333\n 4  4 [Welle 4 (2010)]      0          1210       1447.  10800    0.334\n 5  5 [Welle 5 (2011)]      0          1250       1494.  33363    0.367\n 6  6 [Welle 6 (2012)]      0          1215       1459.  15950    0.348\n 7  7 [Welle 7 (2013)]      0          1250       1539.  87835    0.382\n 8  8 [Welle 8 (2014)]      0          1255       1456.   9000    0.322\n 9 10 [Welle 10 (2016)]     0          1375       1541.   6300    0.317\n10 11 [Welle 11 (2017)]     0          1500       1748.  44440    0.340\n11 12 [Welle 12 (2018)]     0          1500       1667.   7150    0.312\n12 13 [Welle 13 (2019)]     0          1550       1816.  88453    0.358\n13  9 [Welle 9 (2015)]      0          1280       1613. 110451    0.387\n```\n:::\n:::\n\nHier stört aber die Sortierung der Welle (R übernimmt die Sortierung aus den Daten).\nAlso hängen wir ein `arrange()` an, um die Sortierung nach `welle` anzufordern:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% summarise(Minimum = min(netges,na.rm = T),\n                    Median = median(netges,na.rm = T),\n                    Mittelwert = mean(netges,na.rm = T),\n                    Maximum = max(netges,na.rm = T),\n                    Gini = Gini(netges),\n                   .by = welle) %>% \n  arrange(welle)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 6\n   welle                    Minimum   Median Mittelwert Maximum    Gini\n   <dbl+lbl>                <dbl+lbl>  <dbl>      <dbl> <dbl+lbl> <dbl>\n 1  1 [Welle 1 (2006/2007)] 1          1200       1525. 111419    0.416\n 2  2 [Welle 2 (2007/2008)] 0          1320       1529.   7200    0.333\n 3  3 [Welle 3 (2008/2009)] 0          1298.      1498.  12000    0.349\n 4  4 [Welle 4 (2010)]      0          1210       1447.  10800    0.334\n 5  5 [Welle 5 (2011)]      0          1250       1494.  33363    0.367\n 6  6 [Welle 6 (2012)]      0          1215       1459.  15950    0.348\n 7  7 [Welle 7 (2013)]      0          1250       1539.  87835    0.382\n 8  8 [Welle 8 (2014)]      0          1255       1456.   9000    0.322\n 9  9 [Welle 9 (2015)]      0          1280       1613. 110451    0.387\n10 10 [Welle 10 (2016)]     0          1375       1541.   6300    0.317\n11 11 [Welle 11 (2017)]     0          1500       1748.  44440    0.340\n12 12 [Welle 12 (2018)]     0          1500       1667.   7150    0.312\n13 13 [Welle 13 (2019)]     0          1550       1816.  88453    0.358\n```\n:::\n:::\n\n\nWas aber wenn wir nur Welle 1 und 10 vergleichen wollen? Wir schalten einen `filter()` vor:\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% \n  filter(welle %in% c(1,10)) %>% \n  summarise(Minimum = min(netges,na.rm = T),\n                    Median = median(netges,na.rm = T),\n                    Mittelwert = mean(netges,na.rm = T),\n                    Maximum = max(netges,na.rm = T),\n                    Gini = Gini(netges),\n                   .by = welle)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  welle                    Minimum   Median Mittelwert Maximum    Gini\n  <dbl+lbl>                <dbl+lbl>  <dbl>      <dbl> <dbl+lbl> <dbl>\n1  1 [Welle 1 (2006/2007)] 1           1200      1525. 111419    0.416\n2 10 [Welle 10 (2016)]     0           1375      1541.   6300    0.317\n```\n:::\n:::\n\n\n\n<!-- ::: callout-tip -->\n\n<!-- Für den Kennzahlenvergleich können wir auch die Schreibweise mit `[]` verwenden, beispielsweise können wir für das gesamte `summary` die Differenz zwischen NRW und Niedersachsen bilden: -->\n<!-- ```{r sw5_su_vgl} -->\n<!-- summary(pend$netges[pend$Bula == 5], na.rm = T) - -->\n<!--   summary(pend$netges[pend$Bula == 3], na.rm = T)  -->\n<!-- ``` -->\n\n<!-- ::: -->\n\n<!-- ::: note -->\n\n<!-- [**Häufige Fehlermeldungen**](#rerror) -->\n\n<!-- ::: -->\n\n### [Übung](#descue3) {#ue3_3}\n\n\n## Übungen\n\n<!-- {{< include _03_0_ueb.qmd >}} -->\nAlle Übungen beziehen sich auf das PASS CampusFile:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\npend <- read_dta(\"./orig/PENDDAT_cf_W13.dta\")\n```\n:::\n\n\n**[Zur Erinnerung: hier geht's zur Übersicht der Einlesebefehle](02_intro.qmd#import)**\n\n\n### Übung 1 {#descue1}\n\nWir interessieren uns für die Variable `famstand`, welche den Familienstand der Befragten enthält:\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"ssguszkfve\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#ssguszkfve .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 9px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ssguszkfve .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ssguszkfve .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ssguszkfve .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ssguszkfve .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ssguszkfve .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ssguszkfve .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ssguszkfve .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ssguszkfve .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ssguszkfve .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ssguszkfve .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ssguszkfve .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ssguszkfve .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ssguszkfve .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ssguszkfve .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ssguszkfve .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ssguszkfve .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ssguszkfve .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ssguszkfve .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ssguszkfve .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ssguszkfve .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ssguszkfve .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ssguszkfve .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ssguszkfve .gt_left {\n  text-align: left;\n}\n\n#ssguszkfve .gt_center {\n  text-align: center;\n}\n\n#ssguszkfve .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ssguszkfve .gt_font_normal {\n  font-weight: normal;\n}\n\n#ssguszkfve .gt_font_bold {\n  font-weight: bold;\n}\n\n#ssguszkfve .gt_font_italic {\n  font-style: italic;\n}\n\n#ssguszkfve .gt_super {\n  font-size: 65%;\n}\n\n#ssguszkfve .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#ssguszkfve .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ssguszkfve .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ssguszkfve .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ssguszkfve .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ssguszkfve .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ssguszkfve .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"famstand\">famstand</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"label\">label</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-8</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Unplausibler Wert</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-4</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Frage irrtuemlich nicht gestellt</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-3</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Trifft nicht zu (Filter)</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-2</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Keine Antwort</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 1</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Ledig</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 2</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Verheiratet/eing. Lebensp., zus. lebd.</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 3</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Verheiratet/eing. Lebensp., getr. lebd.</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 4</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Geschieden</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 5</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Verwitwet</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n\n+ Lassen Sie sich eine Tabelle mit den absoluten Häufigkeiten anzeigen, nutzen Sie dafür sowohl `table()` als auch `count()` (Denken Sie daran, `{tidyverse}` zu laden für `count()`). \n+ Überschreiben Sie Missing-Codes mit `NA`.\n+ Hat das Überschreiben der Missings mit NA geklappt? Erstellen Sie die Tabelle erneut.\n+ Lassen Sie sich der relativen Häufigkeiten (Anteile) ausgeben. Verwenden Sie `prop.table()` auf Basis des `table()`.\n+ Erstellen Sie eine Kontingenztabelle, indem Sie neben `famstand` auch das Geschlecht `zpsex` (2 = Frauen, 1 = Männer) mit einbeziehen\n\n[Zurück nach oben](#ue3_1)\n\n### Übung 2 {#descue2}\n\n<!-- + Erstellen Sie mit Hilfe von `count()` eine Tabelle mit absoluten, relativen und kumulierten relativen Häufigkeiten für `famstand`. Erstellen Sie zunächst eine Auszählung mit `count()` und fügen Sie dann die relativen und kumulierten relativen Häufigkeiten hinzu. -->\n+ Erstellen Sie eine Kontingenztabelle für `famstand` und `zpsex`\n+ Wie viel Prozent der Befragten sind geschiedene Frauen? \n+ Wie viel Prozent der befragten Frauen sind geschieden? Nutzen Sie die `margin =`-Option\n+ Wie viel Prozent der befragten Geschiedenen sind Frauen? Nutzen Sie die `margin =`-Option\n  \n[Zurück nach oben](#ue3_2)\n\n### Übung 3 {#descue3}\n\nBeschreiben Sie das Alter der Befragten (`palter`) mit `summary` und erstellen Sie selbst einen Überblick mit Hilfe von `summarise()`, der einen Vergleich des Befragtenalters nach Familienstand erlaubt.\n\n  + Überschreiben Sie zunächst die Missings mit `NA`: \n\n::: {.cell}\n\n```{.r .cell-code}\npend$palter[pend$palter<0] <- NA\npend$famstand[pend$famstand<0] <- NA\n```\n:::\n\n  \n  + Erstellen Sie einen Überblick mit `summary()`\n  + Erstellen Sie einen Überblick mit dem Minimum, Median, arith. Mittel, Varianz und Maximum der Alterswerte mit Hilfe von `summarise()`\n  + Erweitern Sie diesen Überblick dann so, dass sie einen Vergleich der Kennzahlen für die verschiedenen `famstand`-Kategorien ausgegeben bekommen.\n\n[Zurück nach oben](#ue3_3)\n\n## Hinweise \n\n### Runden mit `round()` {#round}\n\n\nErläuterung: Sie können mit `round(x , 3)` Werte auf eine gewisse Zahl von Ziffern runden. Die zweite Zahl in der Klammer (nach dem Komma) gibt an, wieviele Dezimalstellen wir möchten:\n\n::: {.cell}\n\n```{.r .cell-code}\nround(21.12121123,digits = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21.121\n```\n:::\n\n```{.r .cell-code}\nround(21.12121123,digits = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21.12121\n```\n:::\n\n```{.r .cell-code}\nround(21.12121123,digits = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21\n```\n:::\n:::\n\n\nWir können also die relativen Häufigkeiten runden und so die Tabelle von oben übersichtlicher machen: \n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~zpsex+statakt, data = pend) %>% \n  prop.table(.,margin = 1) %>% \n  round(.,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     statakt\nzpsex     1     2     3\n    1 0.470 0.325 0.205\n    2 0.430 0.261 0.309\n```\n:::\n:::\n\n\n\n\n### Wie kann ich mir in R automatisch die häufigste/seltenste Ausprägung ausgeben lassen?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt4 <- table(pend$palter)\nt4[which(t4 == max(t4))] # Modus\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 51 \n621 \n```\n:::\n:::\n\n51 ist mit 621 Befragten die häufigste Ausprägung.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}