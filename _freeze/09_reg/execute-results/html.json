{
  "hash": "f5bb36ad31ccf7e3095c0c6c01536aa2",
  "result": {
    "markdown": "# Regressionsmodelle {#reg}\n\n\n\n\n\nZum Einstieg betrachten wir zunächst einen (fiktiven) Datensatz mit lediglich fünf Fällen. Mit dem `data.frame` Befehl können wir einen Datensatz erstellen. Unserer hat zunächst lediglich zwei Variablen: var1 und var2 \n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- data.frame(id   = 1:8,\n                   var1 = c(2,1,2,5,7, 8, 9,5),\n                   var2 = c(2,2,1,9,7, 4,25,3),\n                   educ = c(3,1,2,2,1, 3, 2,-1),\n                   gend = c(2,1,1,2,1,2,1,2),\n                   x    = c(2,1,2,4,1,NA,NA,NA) )\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x\n1  1    2    2    3    2  2\n2  2    1    2    1    1  1\n3  3    2    1    2    1  2\n4  4    5    9    2    2  4\n5  5    7    7    1    1  1\n6  6    8    4    3    2 NA\n7  7    9   25    2    1 NA\n8  8    5    3   -1    2 NA\n```\n:::\n:::\n\n\n## Regressionsmodelle mit `lm()` {#lm1}\n\n\n::: {.cell}\n\n:::\n\n\nRegressionsmodelle in R lassen sich mit `lm()` erstellen. \nHier geben wir das Merkmal an, dass auf der y-Achse liegt (die *abhängige* Variable) und nach einer `~`  das Merkmal für die x-Achse (*unabhängige* Variable). Die Interpretation des Ergebnisses wird uns die kommenden Wochen beschäftigen. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(var2~ var1, data = dat1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ var1, data = dat1)\n\nCoefficients:\n(Intercept)         var1  \n     -2.340        1.839  \n```\n:::\n:::\n\n\nDer Wert unter `var1` gibt an, um *wieviel sich die Gerade pro \"Schritt nach rechts\" nach oben/unten verändert*. Die Gerade steigt also pro Einheit von `var1` um 1.8389662. Die Ergebnisse können wir unter `m1` ablegen:\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- lm(var2~ var1, data = dat1)  \n```\n:::\n\n\nMit `summary()` bekommen wir dann eine Regressionstabelle:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ var1, data = dat1)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-8.372 -3.613  0.162  2.234 10.789 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)  -2.3400     4.3454  -0.538   0.6096  \nvar1          1.8390     0.7727   2.380   0.0548 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.127 on 6 degrees of freedom\nMultiple R-squared:  0.4856,\tAdjusted R-squared:  0.3999 \nF-statistic: 5.664 on 1 and 6 DF,  p-value: 0.05477\n```\n:::\n:::\n\n\n\n`m1` enthält alle Informationen zum Modell, besonders hilfreich ist `$coefficients`:\n\n::: {.cell}\n\n```{.r .cell-code}\nm1$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)        var1 \n  -2.339960    1.838966 \n```\n:::\n\n```{.r .cell-code}\nsummary(m1)$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Estimate Std. Error    t value   Pr(>|t|)\n(Intercept) -2.339960  4.3453801 -0.5384938 0.60961706\nvar1         1.838966  0.7727028  2.3799139 0.05477457\n```\n:::\n:::\n\n\nWir können uns die einzelnen Werte mit `View(m1)` ansehen: \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"jsonedit html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-db479ebe8379f447c1de\" style=\"width:100%;height:10%;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-db479ebe8379f447c1de\">{\"x\":{\"data\":{\"coefficients\":{\"(Intercept)\":-2.33996023856859,\"var1\":1.8389662027833},\"residuals\":{\"1\":0.662027833001989,\"2\":2.50099403578529,\"3\":-0.337972166998013,\"4\":2.14512922465209,\"5\":-3.53280318091451,\"6\":-8.37176938369781,\"7\":10.7892644135189,\"8\":-3.85487077534791},\"effects\":{\"(Intercept)\":-18.7383297014435,\"var1\":14.5818540383869,\"3\":-0.958261392445137,\"4\":2.15669989405101,\"5\":-3.09999258161823,\"6\":-7.72833881945285,\"7\":11.6433149427125,\"8\":-3.84330010594899},\"rank\":2,\"fitted.values\":{\"1\":1.33797216699801,\"2\":-0.500994035785286,\"3\":1.33797216699801,\"4\":6.85487077534791,\"5\":10.5328031809145,\"6\":12.3717693836978,\"7\":14.2107355864811,\"8\":6.85487077534791},\"assign\":[0,1],\"qr\":{\"qr\":[[-2.82842712474619,-13.7885822331377],[0.353553390593274,7.92937576357685],[0.353553390593274,0.26786961834195],[0.353553390593274,-0.110470378329709],[0.353553390593274,-0.362697042777481],[0.353553390593274,-0.488810375001367],[0.353553390593274,-0.614923707225254],[0.353553390593274,-0.110470378329709]],\"qraux\":[1.35355339059327,1.39398295056584],\"pivot\":[1,2],\"tol\":1e-07,\"rank\":2},\"df.residual\":6,\"xlevels\":{},\"call\":{},\"terms\":{},\"model\":{\"var2\":[2,2,1,9,7,4,25,3],\"var1\":[2,1,2,5,7,8,9,5]}},\"options\":{\"mode\":\"view\",\"modes\":[\"code\",\"form\",\"text\",\"tree\",\"view\"]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nBspw. finden sich unter `fitted.values` die vorhergesagten Werte für jeden Fall.\n\n## Regressionsgerade und Daten visualisieren\n\nMit `geom_smooth(method = \"lm\")` können wir Regressionsgeraden auch in `{ggplot2}` darstellen:\n\nUnser Modell mit `var1` und `var2` können wir so darstellen:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(dat1, aes(x = var1, y = var2)) + \n  geom_point(size = 2) + \n  geom_smooth(method = \"lm\")  \n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=288}\n:::\n:::\n\n\nHier scheinen wir einen Ausreißer zu haben. In unserem übersichtlichen Datensatz ist der schnell gefunden. In größeren Datensätzen hilft uns `geom_text()`:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(dat1, aes(x = var1, y = var2)) + \n  geom_point(size = 2) + \n  geom_smooth(method = \"lm\")  +\n  geom_text(data = . %>% filter(var2 > 20), aes(y = var2+3, label = id), color = \"sienna1\")\n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/graph2-1.png){fig-align='center' width=288}\n:::\n:::\n\n\nWir können nämlich einzelne `geom_` auch nur für ein Subset angeben - dazu vergeben wir `data =` neu (übernehmen also nicht die Auswahl aus dem Haupt-Befehl `ggplot()`) und setzen darin einen `filter()`. Außerdem verschieben wir mit `var2+3` das Label etwas über den Punkt.\n\n\n### [Übung](#reg1) \n\n\n## Modelle nur für manche Fälle berechnen\n\nWenn wir jetzt das Modell nochmal berechnen wollen, haben wir zwei Möglichkeiten:\n\n### Neuen data.frame erstellen\n\nWir können in R mehrere `data.frame`-Objekte im Speicher halten. Also können wir leicht einen neuen `data.frame` erstellen, der nur die Beobachtungen mit `var2 < 20` enthält und diesen dann für unseren `lm()`-Befehl verwenden:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1_u20 <- dat1 %>% filter(var2<20)\nm2a <- lm(var2~ var1, data = dat1_u20)\nsummary(m2a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ var1, data = dat1_u20)\n\nResiduals:\n      1       2       3       4       5       6       7 \n-0.4737  0.1941 -1.4737  4.5230  1.1875 -2.4803 -1.4770 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   1.1382     1.9217   0.592    0.579\nvar1          0.6678     0.3877   1.722    0.146\n\nResidual standard error: 2.555 on 5 degrees of freedom\nMultiple R-squared:  0.3724,\tAdjusted R-squared:  0.2469 \nF-statistic: 2.967 on 1 and 5 DF,  p-value: 0.1456\n```\n:::\n:::\n\n\n### Direkt in `lm()` filtern\n\nWir können `filter()`-Befehl auch direkt in das `data=`-Argument von `lm()` bauen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2b <- lm(var2~ var1, data = dat1 %>% filter(var2<20))\nsummary(m2b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ var1, data = dat1 %>% filter(var2 < 20))\n\nResiduals:\n      1       2       3       4       5       6       7 \n-0.4737  0.1941 -1.4737  4.5230  1.1875 -2.4803 -1.4770 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   1.1382     1.9217   0.592    0.579\nvar1          0.6678     0.3877   1.722    0.146\n\nResidual standard error: 2.555 on 5 degrees of freedom\nMultiple R-squared:  0.3724,\tAdjusted R-squared:  0.2469 \nF-statistic: 2.967 on 1 and 5 DF,  p-value: 0.1456\n```\n:::\n:::\n\n\n<!-- ...übrigens: wir können auch in `geom_smooth()` filtern: -->\n<!-- ```{r, fig.height=3, fig.width=3, echo=T, fig.align=\"center\" , warning=F,message=F} -->\n<!-- ggplot(dat1, aes(x = var1, y = var2)) +  -->\n<!--   geom_smooth(method = \"lm\", color = \"darkblue\" , fill = \"lightskyblue\", size = .65)  + -->\n<!--   geom_smooth(data = dat1 %>% filter(var2<20), -->\n<!--     method = \"lm\", color = \"sienna1\" , fill = \"sienna2\", size = .65)  + -->\n<!--   geom_point(size = 2)  -->\n<!-- ``` -->\n\n\n## Regressionstabellen\n\nWenn wir diese verschiedenen Modelle jetzt vergleichen möchten, bietet sich eine Tabelle an. \n\nEs gibt zahlreiche Alternativen zur Erstellung von Regressionstabellen, mein persönlicher Favorit ist `modelsummary()` aus dem gleichnamigen Paket [{modelsummary}](https://vincentarelbundock.github.io/modelsummary/).\nEs kommt mit (nahezu) allen Modellarten zurecht und bietet darüber hinaus eine breite Palette an (u.a. auch [Word-Output](#14_tabellenexport.qmd) - dazu später mehr) und auch Koeffizientenplots (auch dazu kommen wir noch).\nAußerdem ist die [Dokumentation](https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html) hervorragend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfdz_install(\"modelsummary\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(modelsummary)\nmodelsummary(list(m1,m2a,m2b))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\">  (1) </th>\n   <th style=\"text-align:center;\">   (2) </th>\n   <th style=\"text-align:center;\">   (3) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> -2.340 </td>\n   <td style=\"text-align:center;\"> 1.138 </td>\n   <td style=\"text-align:center;\"> 1.138 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (4.345) </td>\n   <td style=\"text-align:center;\"> (1.922) </td>\n   <td style=\"text-align:center;\"> (1.922) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> var1 </td>\n   <td style=\"text-align:center;\"> 1.839 </td>\n   <td style=\"text-align:center;\"> 0.668 </td>\n   <td style=\"text-align:center;\"> 0.668 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.773) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.388) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.388) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 8 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.486 </td>\n   <td style=\"text-align:center;\"> 0.372 </td>\n   <td style=\"text-align:center;\"> 0.372 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.400 </td>\n   <td style=\"text-align:center;\"> 0.247 </td>\n   <td style=\"text-align:center;\"> 0.247 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> AIC </td>\n   <td style=\"text-align:center;\"> 55.4 </td>\n   <td style=\"text-align:center;\"> 36.6 </td>\n   <td style=\"text-align:center;\"> 36.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> BIC </td>\n   <td style=\"text-align:center;\"> 55.6 </td>\n   <td style=\"text-align:center;\"> 36.5 </td>\n   <td style=\"text-align:center;\"> 36.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Log.Lik. </td>\n   <td style=\"text-align:center;\"> -24.702 </td>\n   <td style=\"text-align:center;\"> -15.321 </td>\n   <td style=\"text-align:center;\"> -15.321 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:center;\"> 5.664 </td>\n   <td style=\"text-align:center;\"> 2.967 </td>\n   <td style=\"text-align:center;\"> 2.967 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> RMSE </td>\n   <td style=\"text-align:center;\"> 5.31 </td>\n   <td style=\"text-align:center;\"> 2.16 </td>\n   <td style=\"text-align:center;\"> 2.16 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWir werden uns noch ein bisschen ausführlicher mit den Anpassungsmöglichkeiten für `{modelsummary}` befassen, hier nur schon mal zwei zentrale Optionen:\n\n+ mit `stars = T` können wir uns die Signifikanz mit den gebräuchlichen Sternchen-Codes anzeigen lassen (`*`: p < .05 usw.)\n+ mit `gof_omit = \"IC|RM|Log\"` können wir die Goodness of Fit Statistiken ausblenden die `IC`, `RM` oder `Log` im Namen haben (also `AIC`, `BIC`, `RMSE` und die `LogLikelihood`)\n+ mit `\"Name\" =` in `list()` können wir Namen angeben:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelsummary(list(\"m1\"=m1,\"m2a\"=m2a,\"m2b\"=m2b),stars = T,gof_omit = \"IC|RM|Log\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"NAborder-bottom: 0; width: auto !important; margin-left: auto; margin-right: auto;\" class=\"table\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> m1 </th>\n   <th style=\"text-align:center;\">  m2a </th>\n   <th style=\"text-align:center;\">  m2b </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:center;\"> -2.340 </td>\n   <td style=\"text-align:center;\"> 1.138 </td>\n   <td style=\"text-align:center;\"> 1.138 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:center;\"> (4.345) </td>\n   <td style=\"text-align:center;\"> (1.922) </td>\n   <td style=\"text-align:center;\"> (1.922) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> var1 </td>\n   <td style=\"text-align:center;\"> 1.839+ </td>\n   <td style=\"text-align:center;\"> 0.668 </td>\n   <td style=\"text-align:center;\"> 0.668 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;box-shadow: 0px 1px\">  </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.773) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.388) </td>\n   <td style=\"text-align:center;box-shadow: 0px 1px\"> (0.388) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Num.Obs. </td>\n   <td style=\"text-align:center;\"> 8 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 </td>\n   <td style=\"text-align:center;\"> 0.486 </td>\n   <td style=\"text-align:center;\"> 0.372 </td>\n   <td style=\"text-align:center;\"> 0.372 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R2 Adj. </td>\n   <td style=\"text-align:center;\"> 0.400 </td>\n   <td style=\"text-align:center;\"> 0.247 </td>\n   <td style=\"text-align:center;\"> 0.247 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:center;\"> 5.664 </td>\n   <td style=\"text-align:center;\"> 2.967 </td>\n   <td style=\"text-align:center;\"> 2.967 </td>\n  </tr>\n</tbody>\n<tfoot><tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup></sup> + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001</td></tr></tfoot>\n</table>\n\n`````\n:::\n:::\n\n\n### [Übung](#reg2)\n\n## Kategoriale unabhängige Variablen\n\nNatürlich können wir auch kategoriale unabhängige Variablen in unser Modell mit aufnehmen. \nDazu müssen wir aber entsprechende Variable als `factor` definieren - und R so mitteilen, dass die Zahlenwerte nicht numerisch zu interpretieren sind. \nWenn wir `educ` aus unserem kleinen Beispiel betrachten - dann steht 1 für einen grundlegenden Bildungsabschluss, 2 für einen mittleren und 3 für einen hohen Bildungsabschluss.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x\n1  1    2    2    3    2  2\n2  2    1    2    1    1  1\n3  3    2    1    2    1  2\n4  4    5    9    2    2  4\n5  5    7    7    1    1  1\n6  6    8    4    3    2 NA\n7  7    9   25    2    1 NA\n8  8    5    3   -1    2 NA\n```\n:::\n\n```{.r .cell-code}\nm3 <- lm(var2~factor(educ), dat1)\nsummary(m3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ factor(educ), data = dat1)\n\nResiduals:\n         1          2          3          4          5          6          7 \n-1.000e+00 -2.500e+00 -1.067e+01 -2.667e+00  2.500e+00  1.000e+00  1.333e+01 \n         8 \n-2.387e-15 \n\nCoefficients:\n                Estimate Std. Error t value Pr(>|t|)\n(Intercept)    3.000e+00  8.848e+00   0.339    0.752\nfactor(educ)1  1.500e+00  1.084e+01   0.138    0.897\nfactor(educ)2  8.667e+00  1.022e+01   0.848    0.444\nfactor(educ)3 -1.632e-15  1.084e+01   0.000    1.000\n\nResidual standard error: 8.848 on 4 degrees of freedom\nMultiple R-squared:  0.2848,\tAdjusted R-squared:  -0.2516 \nF-statistic: 0.531 on 3 and 4 DF,  p-value: 0.685\n```\n:::\n:::\n\n\nNoch schöner ist das aber natürlich, wenn wir `educ` vorher labeln:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$ed_fct <- factor(dat1$educ, levels = 1:3,\n                        labels = c(\"basic\",\"medium\",\"high\"))\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x ed_fct\n1  1    2    2    3    2  2   high\n2  2    1    2    1    1  1  basic\n3  3    2    1    2    1  2 medium\n4  4    5    9    2    2  4 medium\n5  5    7    7    1    1  1  basic\n6  6    8    4    3    2 NA   high\n7  7    9   25    2    1 NA medium\n8  8    5    3   -1    2 NA   <NA>\n```\n:::\n:::\n\n\nDann verwenden den `factor` im Regressionsbefehl:\n\n::: {.cell}\n\n```{.r .cell-code}\nm3 <- lm(var2 ~ ed_fct, dat1)\nsummary(m3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ ed_fct, data = dat1)\n\nResiduals:\n      1       2       3       4       5       6       7 \n -1.000  -2.500 -10.667  -2.667   2.500   1.000  13.333 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)\n(Intercept)     4.500      6.257   0.719    0.512\ned_fctmedium    7.167      8.077   0.887    0.425\ned_fcthigh     -1.500      8.848  -0.170    0.874\n\nResidual standard error: 8.848 on 4 degrees of freedom\n  (1 Beobachtung als fehlend gelöscht)\nMultiple R-squared:  0.2594,\tAdjusted R-squared:  -0.1109 \nF-statistic: 0.7005 on 2 and 4 DF,  p-value: 0.5485\n```\n:::\n:::\n\n\n\n+ Im Vergleich zu `educ = basic` ist der vorhergesagte Wert für `var2` bei `educ = medium` um 7.17 höher.\n\n+ Im Vergleich zu `educ = basic` ist der vorhergesagte Wert für `var2` bei `educ = high` um -1.5 höher.\n\nWir können die Referenzkategorie auch ändern:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$ed_fct <- relevel(dat1$ed_fct,ref = \"medium\")\nm3b <- lm(var2 ~ ed_fct, dat1)\nsummary(m3b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ ed_fct, data = dat1)\n\nResiduals:\n      1       2       3       4       5       6       7 \n -1.000  -2.500 -10.667  -2.667   2.500   1.000  13.333 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)   11.667      5.109   2.284   0.0844 .\ned_fctbasic   -7.167      8.077  -0.887   0.4251  \ned_fcthigh    -8.667      8.077  -1.073   0.3437  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.848 on 4 degrees of freedom\n  (1 Beobachtung als fehlend gelöscht)\nMultiple R-squared:  0.2594,\tAdjusted R-squared:  -0.1109 \nF-statistic: 0.7005 on 2 and 4 DF,  p-value: 0.5485\n```\n:::\n:::\n\n+ Im Vergleich zu `educ = medium` ist der vorhergesagte Wert für `var2` bei `educ = basic` um 7.17 niedriger.\n\n+ Im Vergleich zu `educ = medium` ist der vorhergesagte Wert für `var2` bei `educ = high` um 8.67 niedriger.\n\n\n### [Übung](#reg3)\n\n\n## Mehre unabhängige Variablen\n\nUm mehrere unabhängige Variablen in unser Regressionsmodellen aufzunehmen, geben wir sie mit `+` an:\n\n::: {.cell}\n\n```{.r .cell-code}\nm4 <- lm(var2 ~ ed_fct  + var1, dat1)\nsummary(m4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ ed_fct + var1, data = dat1)\n\nResiduals:\n     1      2      3      4      5      6      7 \n 4.258  2.758 -4.824 -2.082 -2.758 -4.258  6.907 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   2.3187     5.8227   0.398    0.717\ned_fctbasic  -4.8297     6.0381  -0.800    0.482\ned_fcthigh   -8.0824     5.9411  -1.360    0.267\nvar1          1.7527     0.8347   2.100    0.127\n\nResidual standard error: 6.501 on 3 degrees of freedom\n  (1 Beobachtung als fehlend gelöscht)\nMultiple R-squared:  0.7002,\tAdjusted R-squared:  0.4003 \nF-statistic: 2.335 on 3 and 3 DF,  p-value: 0.2521\n```\n:::\n:::\n\n\n\n\n## Koeffizientenplots {#modelplot}\n\n\n\n\nNeben Regressionstabellen stellt [`{modelsummary}`](https://vincentarelbundock.github.io/modelsummary/articles/modelplot.html) auch die Funktion `modelplot()` zur Verfügung, mit denen einfach ein Koeffizientenplot aus einem oder mehreren Modellen erstellt werden kann:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelplot(m4)\n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/unnamed-chunk-17-1.png){width=50% height=50%}\n:::\n:::\n\n\nFür einen Modellvergleich geben wir einfach die Modelle in einer named `list` an, außerdem können wir mit den üblichen `{ggplot2}`-Befehlen die Grafik weiter anpassen:\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelplot(list(\"Modell 1\"=m1,\n               \"Modell 4\"=m4))\n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/unnamed-chunk-18-1.png){width=50% height=50%}\n:::\n:::\n\n\nMit `coef_map` können wir Labels für die Koeffizienten vergeben (`(Intercept)` bekommt keinen Namen und wird daher weggelassen:\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelplot(list(\"Modell 1\"=m1,\n               \"Modell 4\"=m4),\n          coef_map = c(\"var1\" = \"Name für var1\",\n                       \"ed_fcthigh\"  = \"Höhere Bildung\",\n                       \"ed_fctbasic\" = \"Grundlegende Bildung\"\n                          ))\n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/unnamed-chunk-19-1.png){width=50% height=50%}\n:::\n:::\n\n\nAußerdem können wir mit den üblichen `{ggplot2}`-Befehlen die Grafik weiter anpassen:\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelplot(list(\"Modell 1\"=m1,\n               \"Modell 4\"=m4),\n          coef_map = c(\"var1\" = \"Name für var1\",\n                       \"ed_fcthigh\"  = \"Höhere Bildung\",\n                       \"ed_fctbasic\" = \"Grundlegende\\nBildung\")) + # \\n fügt einen Zeilenumbruch ein\n  geom_vline(aes(xintercept = 0), linetype = \"dashed\", color = \"grey40\") +  # 0-Linie einfügen\n  scale_color_manual(values = c(\"orange\",\"navy\")) +\n  theme_minimal(base_size = 15,base_family = \"mono\") \n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/unnamed-chunk-20-1.png){width=50% height=50%}\n:::\n:::\n\n\nMit `{broom}` können wir auch einen `data.frame` aus den Regressionsergebnissen erstellen und den `ggplot` ganz selbst erstellen - [siehe Anhang](#broomplt).\n\n### [Übung](#reg4)\n\n\n## Übungen\n\nVerwenden Sie folgenden Subdatensatz des PASS CampusFiles:\n\n::: {.cell}\n\n```{.r .cell-code}\npend_ue08 <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\") %>% \n  filter(welle == 13, netges > 0, azges1 > 0,schul2 > 1, palter > 0)\n```\n:::\n\n\n### Übung 1: Regression {#reg1}\n\n\n+ Erstellen Sie ein Objekt `mod1` mit einem linearen Regressionsmodell (`lm`) mit `netges` (Monatsnetto in EUR) als abhängiger und `azges1` (Arbeitszeit in Stunden) als unabhängiger Variable! (siehe [hier](#lm1))\n+ Betrachten Sie Ergebnisse `mod1` - was können Sie zum Zusammenhang zwischen `netges` und `azges1` erkennen?\n+ Visualisieren Sie Ihr Regressionsmodell mit `{ggplot2}`.\n+ Sehen Sie Ausreißer im Scatterplot? Markieren Sie diese mit Hilfe der Variable `pnr` und `geom_text()`.\n\n### Übung 2: Nur manche Beobachtungen {#reg2} \n\n+ Erstellen Sie ein `lm()`-Modell `mod2`, welches nur auf den Beobachtungen mit einem Monatseinkommen unter 20.000 EUR beruht.\n+ Erstellen Sie eine Regressionstabelle, welche diese neue Modell `mod2` neben das Modell `mod1` aus Übung 1 stellt.\n\n\n### Übung 3: kat. UVs {#reg3}\n\n+ Erstellen Sie ein Regressionsmodell mit de Einkommen der Befragen (`netges`) als abhängiger und dem Schulabschluss der Befragten `schul` als unabhängiger Variable:\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"sgkkjwubau\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#sgkkjwubau .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#sgkkjwubau .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#sgkkjwubau .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#sgkkjwubau .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#sgkkjwubau .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#sgkkjwubau .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#sgkkjwubau .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#sgkkjwubau .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#sgkkjwubau .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#sgkkjwubau .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#sgkkjwubau .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#sgkkjwubau .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#sgkkjwubau .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#sgkkjwubau .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgkkjwubau .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#sgkkjwubau .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#sgkkjwubau .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgkkjwubau .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#sgkkjwubau .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgkkjwubau .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#sgkkjwubau .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgkkjwubau .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sgkkjwubau .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgkkjwubau .gt_left {\n  text-align: left;\n}\n\n#sgkkjwubau .gt_center {\n  text-align: center;\n}\n\n#sgkkjwubau .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#sgkkjwubau .gt_font_normal {\n  font-weight: normal;\n}\n\n#sgkkjwubau .gt_font_bold {\n  font-weight: bold;\n}\n\n#sgkkjwubau .gt_font_italic {\n  font-style: italic;\n}\n\n#sgkkjwubau .gt_super {\n  font-size: 65%;\n}\n\n#sgkkjwubau .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#sgkkjwubau .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#sgkkjwubau .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#sgkkjwubau .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#sgkkjwubau .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#sgkkjwubau .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#sgkkjwubau .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"value\">value</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"label\">label</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"value\" class=\"gt_row gt_center\"><div class='gt_from_md'><p><code>-10 bis -1 und 1</code></p>\n</div></td>\n<td headers=\"label\" class=\"gt_row gt_left\">t.n.z./k.A.</td></tr>\n    <tr><td headers=\"value\" class=\"gt_row gt_center\"><div class='gt_from_md'><p><code>2</code></p>\n</div></td>\n<td headers=\"label\" class=\"gt_row gt_left\">Schule beendet ohne Abschluss</td></tr>\n    <tr><td headers=\"value\" class=\"gt_row gt_center\"><div class='gt_from_md'><p><code>3</code></p>\n</div></td>\n<td headers=\"label\" class=\"gt_row gt_left\">Sonder-/Foerderschulabschluss</td></tr>\n    <tr><td headers=\"value\" class=\"gt_row gt_center\"><div class='gt_from_md'><p><code>4</code></p>\n</div></td>\n<td headers=\"label\" class=\"gt_row gt_left\">Volks-/Hauptschulabschluss bzw: POS 8./9. Klasse</td></tr>\n    <tr><td headers=\"value\" class=\"gt_row gt_center\"><div class='gt_from_md'><p><code>5</code></p>\n</div></td>\n<td headers=\"label\" class=\"gt_row gt_left\">Mittlere Reife/Realschulabschluss bzw. POS 10. Klasse</td></tr>\n    <tr><td headers=\"value\" class=\"gt_row gt_center\"><div class='gt_from_md'><p><code>6</code></p>\n</div></td>\n<td headers=\"label\" class=\"gt_row gt_left\">Fachhochschulreife</td></tr>\n    <tr><td headers=\"value\" class=\"gt_row gt_center\"><div class='gt_from_md'><p><code>7</code></p>\n</div></td>\n<td headers=\"label\" class=\"gt_row gt_left\">Allgem. oder fachgeb. Hochschulreife (Abitur)/EOS 12. Klasse</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n+ Achten Sie darauf, dass `schul2` als `factor` definiert ist. Vergeben Sie für die Levels 2-7 die Labels \"ohne\", \"Förderschule\",\"Hauptschule\",\"Mittlere Reife\",\"FOS/BOS\",\"Abi\" und legen sie den `factor` als Variable `schul2_fct` in Ihrem `data.frame` ab - siehe Code-Hilfe unten:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npend_ue08$schul2_fct <-  \n  factor(pend_ue08$schul2,levels = 2:7, labels = c(\"ohne\",\"Förderschule\",\"Hauptschule\",\"Mittlere Reife\",\"FOS/BOS\",\"Abi\"))\n```\n:::\n\n+ Erstellen Sie das Regressionsmodell mit dieser neuen factor-Variable für `schul2_fct` als unabhängiger Variablen.\n+ Ändern Sie die Referenzkategorie auf die Ausprägung *Mittlere Reife*  (`schul2` = 5) und schätzen Sie das Modell erneut.\n\n\n\n### Übung 4: mehrere UVs & Koeffizientenplot {#reg4}\n\n+ Passen Sie das `lm()`-Modell `mod1` (mit allen Fällen aus `pend_u08`) so an, dass neben der Arbeitszeit zusätzlich den Schulabschluss (`schul2`) als unabhängige Variable mit aufgenommen werden.\n+ Erstellen Sie auch eine grafische Gegenüberstellung der beiden Modelle mit und ohne den Schulabschluss\n\n\n\n<!-- ### Übung 5: Interaktionen {#reg5} -->\n\n\n<!-- ### Übung 6: quad. Terme {#reg6} -->\n\n<!-- + Erstellen Sie ein Modell `m4` mit einem quadratischen Term: -->\n\n<!-- $$\\texttt{F518\\_SUF} = \\beta0 + \\beta1 \\times \\texttt{az} + \\beta2 \\times \\texttt{az}^2 + \\varepsilon$$ -->\n\n\n\n\n## Anhang\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- dat1 %>% select(-matches(\"compl\"))\n```\n:::\n\n\n\n\n\n### Vorhergesagte Werte {#pred}\n\nDie vorhergesagten Werte von `lm()` finden sich unter `$fitted.values`:\n\n::: {.cell}\n\n```{.r .cell-code}\nm1$fitted.values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        1         2         3         4         5         6         7         8 \n 1.337972 -0.500994  1.337972  6.854871 10.532803 12.371769 14.210736  6.854871 \n```\n:::\n:::\n\nDiese vorhergesagten Werte entsprechen einfach der Summe aus dem Wert unter `Intercept` und dem Wert unter `var1` multipliziert mit dem jeweiligen Wert für `var1`. \n\n::: {.cell}\n\n```{.r .cell-code}\nm1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = var2 ~ var1, data = dat1)\n\nCoefficients:\n(Intercept)         var1  \n     -2.340        1.839  \n```\n:::\n:::\n\nFür die erste Zeile aus `dat1` ergibt sich also `m1` folgender vorhergesagter Wert: `2.1351+0.5811*1=`2.7162\n\nDie Werte unter `fitted.values` folgen der Reihenfolge im Datensatz, sodass wir sie einfach als neue Spalte in `dat1` ablegen können:\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$lm_vorhersagen <- m1$fitted.values\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x ed_fct lm_vorhersagen\n1  1    2    2    3    2  2   high       1.337972\n2  2    1    2    1    1  1  basic      -0.500994\n3  3    2    1    2    1  2 medium       1.337972\n4  4    5    9    2    2  4 medium       6.854871\n5  5    7    7    1    1  1  basic      10.532803\n6  6    8    4    3    2 NA   high      12.371769\n7  7    9   25    2    1 NA medium      14.210736\n8  8    5    3   -1    2 NA   <NA>       6.854871\n```\n:::\n:::\n\nDie Grafik zeigt wie Vorhersagen auf Basis von `m1` aussehen: Sie entsprechen den Werten auf der blauen Geraden (der sog. Regressionsgeraden) an den jeweiligen Stellen für `var1`. \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dat1, aes(x = var1, y = var2)) +\n  geom_point(size = 3) +      \n  geom_smooth(method = \"lm\", color = \"darkblue\" , se = FALSE,size =.65) +\n  geom_point(aes(x = var1, y = lm_vorhersagen), color = \"dodgerblue3\", size = 3) +\n  expand_limits(x = c(0,8),y=c(0,8)) \n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=288}\n:::\n:::\n\n\n### Residuen {#res2}\n\nDie hellblauen Punkte (also die Vorhersagen von `m1`) liegen in der Nähe der tatsächlichen Punkte. Trotzdem sind auch die hellblauen Punkte nicht deckungsgleich mit den tatsächlichen Werten. \nDiese Abweichungen zwischen den vorhergesagten und tatsächlichen Werten werden als Residuen bezeichnet:\n$$Residuum = beobachteter\\, Wert \\; - \\; vorhergesagter\\,Wert$$\n$$\\varepsilon_{\\text{i}} = \\text{y}_{i} - \\hat{y}_{i}$$\nWir können diese per Hand berechnen als Differenz zwischen dem tatsächlichen und dem vorhergesagten Wert oder einfach unter `m1$residuals` aufrufen:\n\n::: {.cell}\n\n```{.r .cell-code}\nm1$residuals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         1          2          3          4          5          6          7 \n 0.6620278  2.5009940 -0.3379722  2.1451292 -3.5328032 -8.3717694 10.7892644 \n         8 \n-3.8548708 \n```\n:::\n:::\n\nAuch die Residuen für `lm` können wir in `dat1` ablegen: \n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$lm_residuen <- m1$residuals\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id var1 var2 educ gend  x ed_fct lm_vorhersagen lm_residuen\n1  1    2    2    3    2  2   high       1.337972   0.6620278\n2  2    1    2    1    1  1  basic      -0.500994   2.5009940\n3  3    2    1    2    1  2 medium       1.337972  -0.3379722\n4  4    5    9    2    2  4 medium       6.854871   2.1451292\n5  5    7    7    1    1  1  basic      10.532803  -3.5328032\n6  6    8    4    3    2 NA   high      12.371769  -8.3717694\n7  7    9   25    2    1 NA medium      14.210736  10.7892644\n8  8    5    3   -1    2 NA   <NA>       6.854871  -3.8548708\n```\n:::\n:::\n\n\nHier sind die Residuen für `lm` hellblau eingezeichnet:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dat1, aes(x = var1, y = var2)) + \n  geom_smooth(method = \"lm\", color = \"darkblue\" , se = FALSE,size =.65) +\n  geom_segment(aes(x = var1, xend = var1, y = var2, yend = lm_vorhersagen), color = \"dodgerblue3\", size = .65, linetype = 1) +\n  geom_point(size = 3) +\n  geom_point(aes(x = var1, y = lm_vorhersagen), color = \"dodgerblue3\", size = 3) +\n  expand_limits(x = c(0,8),y=c(0,8)) \n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/unnamed-chunk-32-1.png){fig-align='center' width=264}\n:::\n:::\n\n\n\n### Annahmen checken\n[model dashboard](https://easystats.github.io/easystats/reference/model_dashboard.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"performance\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(performance)\n\nmodel_test <- check_model(m4)\nplot(model_test)\n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/reg02-1.png){width=672}\n:::\n:::\n\n\n\n### Test auf Normalverteilung der Residuen\n\nGrafische Überprüfung: Q-Q-Plot\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggfortify)\nautoplot(m1,which = 2)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](09_reg_files/figure-html/unnamed-chunk-35-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\nÜberprüfen lässt sich die NV-Annahme mit dem Shapiro-Wilk-Test & `shapiro.test()`. Dieser testet die $H_0$: \"Die Residuen sind normalverteilt\" gegen die $H_A$: \"Die Residuen weichen signifikant von der Normalverteilung ab\"\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(m1$residuals) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tShapiro-Wilk normality test\n\ndata:  m1$residuals\nW = 0.95346, p-value = 0.746\n```\n:::\n:::\n\n\n### Test auf Homoskedastizität\n\nHomoskedastizität ist gegeben, wenn die vorhergesagten Werte über den kompletten Wertebereich (ungefähr) gleich weit von den tatsächlichen Werten (`m1\\$fitted.values`) entfernt sind. Auch hier gibt es eine graphische Überprüfungsmethode sowie einen Test. Zur graphischen Überprüfung werden die vorhergesagten Werten und die Residuen als Scatterplot dargestellt. Auch hier hilft uns `autoplot()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(m1, which = 1)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](09_reg_files/figure-html/unnamed-chunk-38-1.png){fig-align='center' width=672 height=50%}\n:::\n:::\n\nDer dazugehörige Test ist der `Breusch-Pagan-Test`. Dieser testet die $H_0$ \"Homoskedastizität\" gegen die $H_A$ \"Heteroskedastizität\", der p-Wert gibt also an mit welcher Irrtumswahrscheinlichkeit wir die Homoskedastizitäts-Annahme verwerfen müssen. In R können wir dafür `bptest` aus dem Paket `lmtest` verwenden:\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"lmtest\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lmtest)\nbptest(m3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tstudentized Breusch-Pagan test\n\ndata:  m3\nBP = 3.6069, df = 2, p-value = 0.1647\n```\n:::\n:::\n\n\n\n### Test auf Multikollinearität\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"car\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(car)\npendx <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",n_max = 300)  %>% filter(netges >0, palter >0 )\nmox <- lm(netges ~ palter + azges1,data=pendx)\ncar::vif(mox)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  palter   azges1 \n1.000133 1.000133 \n```\n:::\n:::\n\nInterpretation:\n\n<!-- + Als Daumenregel zur Beurteilung der Toleranz gilt ein Wert von 0,10 (also 10\\% eigenständiger Varianzanteil), der nicht unterschritten werden sollte. Häufig wird jedoch ein strikterer Grenzwert von 0,20 bis 0,25 empfohlen. Nach unserer Beispielrechnung oben besteht also kein Problem. -->\n+ Ein verbreiteter Schwellenwert des VIF beträgt 10,00. Werte des VIF über 10 deuten auf ein schwerwiegendes Multikollinearitätsproblem, oftmals werden Gegenmaßnahmen schon ab einem strikteren Grenzwert von ca. 5,00 empfohlen. Im konkreten Beispiel ist für alle UVs also nach beiden Grenzwerten alles in Ordnung.\n+ Beim Vorliegen von Mulitkollinearität gibt es mehrere Möglichkeiten, das zu beheben: Wir können eine oder mehrere unabh. Variablen aus dem Modell ausschließen. Das ist letztlich eine inhaltliche Frage und kann nicht mit einem Standardrezept gelöst werden. Alternativ können wir die kollinearen unabh. Variablen zu Indexvariablen zusammenfassen. Wir würden also einen gemeinsamen Index, bspw. der Mittelwert über die jeweiligen unabh. Variablen, erstellen.\n\n### Regressionsmodelle vergleichen\n\nMit dem Paket `{performance}` können wir auch einen umfassenden Modellvergleich bekommen:\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"performance\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(performance)\ncompare_performance(m1,m4,metrics = c(\"R2\",\"R2_adj\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: When comparing models, please note that probably not all models were fit\n  from same data.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# Comparison of Model Performance Indices\n\nName | Model |    R2 | R2 (adj.)\n--------------------------------\nm1   |    lm | 0.486 |     0.400\nm4   |    lm | 0.700 |     0.400\n```\n:::\n:::\n\n\n### Individuelle Koeffizientenplots mit `{broom}` {#broomplt}\n\n`modelplot()` bietet eine schnelle Art, Koeffizientenplots zu erstellen, allerdings verwende ich häufig [`{broom}` ](https://broom.tidyverse.org/).\nMit `broom::tidy(..., conf.int = TRUE)` bekommen wir einen `data.frame` mit den Ergebnissen des Regressionsmodells, die wir bspw. in einem `{ggplot2}` weiterverarbeiten können - wenn uns die Standardlösung von [`modelplot()`](09_reg.qmd#modelplot) nicht weiterhilft/gefällt:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(broom) ## schon geladen als Teil des tidyverse\ntidy(m3, conf.int = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 7\n  term         estimate std.error statistic p.value conf.low conf.high\n  <chr>           <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl>\n1 (Intercept)      4.5       6.26     0.719   0.512    -12.9      21.9\n2 ed_fctmedium     7.17      8.08     0.887   0.425    -15.3      29.6\n3 ed_fcthigh      -1.5       8.85    -0.170   0.874    -26.1      23.1\n```\n:::\n\n```{.r .cell-code}\ntidy(m3, conf.int = TRUE) %>% \n  mutate(term = str_replace(term, \"ed_fct\", \"Education: \")) %>% \n  ggplot(aes(y = term, x = estimate)) +\n  geom_vline(aes(xintercept = 0), linetype = \"dashed\", color = \"navy\") +\n  geom_errorbarh(aes(xmin = conf.low, xmax  = conf.high), height = .1) + \n  geom_point(color = \"orange\", shape = 18,size = 7) +\n  theme_minimal(base_size = 16)\n```\n\n::: {.cell-output-display}\n![](09_reg_files/figure-html/mod1_tidy-1.png){fig-align='center' width=90% height=50%}\n:::\n:::\n",
    "supporting": [
      "09_reg_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\r\n<link href=\"site_libs/jsoneditor-5.25.6/jsoneditor.min.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/jsoneditor-5.25.6/jsoneditor.min.js\"></script>\r\n<script src=\"site_libs/jsonedit-binding-3.0.0/jsonedit.js\"></script>\r\n<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}