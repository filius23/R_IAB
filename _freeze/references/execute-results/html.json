{
  "hash": "404fee69e90f4536e202f3f317dce8df",
  "result": {
    "markdown": "# Links & Weiterführendes {.unnumbered}\n\n\n\n\n\n\n## `%>%` vs. `|>`\n\nIn diesem Kurs haben wir die Pipe ` %>%` aus `{tidyverse}` (streng genommen aus dem Paket `{magrittr}`) kennen gelernt. Mit dem Update auf R 4.1 wurde in base R ebenfalls eine Pipe `|>` eingeführt und Hilfeseiten usw. ersetzen langsam, aber sicher `%>%` durch `|>`. \nFür (nahezu) alle Anwendungen, die wir kennengelernt haben, verhalten sich beide Pipes identisch - und nachdem am IAB R teilweise noch alte R-Versionen installiert sind, haben wir uns an 'alte Variante' gehalten.\nLetztlich spricht aber nichts dagegen, nach einem Update auf `|>` umzusteigen - oder einfach bei ` %>% ` zu bleiben.\n\n<img src=\"pic/pipe.png\" height=\"480px\" />\n\nUnter anderem steht [hier mehr zu den Unterschieden](https://r4ds.hadley.nz/workflow-pipes.html#vs) zwischen beiden Pipes.\nAußerdem bietet [dieser Blogbeitrag](https://kpress.dev/blog/2022-06-19-replacing-the-magrittr-pipe-with-native-r-pipe/) einen guten Überblick zu den Fallstricken beim Umstieg von ` %>% ` auf `|>`. \n\n\n## Anonyme Funktionen: `.x` vs. `/(x)` {#anonymfun}\n\nMit [R 4.1.0](https://towardsdatascience.com/the-new-pipe-and-anonymous-function-syntax-in-r-54d98861014c) wurde in base R eine neue 'anonymous function short hand' eingeführt, welche die 'formula syntax' Schreibweise `~mean(.x)` ablöst, die wir in [Kapitel 6](#06_data_wrangle2) kennen gelernt haben.\nIn der neuen base R wäre das `\\(x) mean(x)` geschrieben. \n\nAus der [`{purrr}` release notes für Version 1.0.0](https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/#documentation) (Dezember 2022):\n*We believe that it’s better to use these new base tools because they work everywhere: the base pipe doesn’t require that you load magrittr and the new function shorthand works everywhere, not just in purrr functions. Additionally, being able to specify the argument name for the anonymous function can often lead to clearer code.*\n\nDementsprechend würde die Anwendung in `across()` wie folgt aussehen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",n_max = 16) %>% \n    select(F1450_04,F1450_05,F1450_06) %>% \n    slice(12:16)\n\n# formula syntax\nsat_small %>% \n  mutate(across(matches(\"F1450\"),~mean(.x)))\n# anonymous function short hand\nsat_small %>% \n  mutate(across(matches(\"F1450\"),\\(x) mean(x) ))\n```\n:::\n\n\nIn diesem Skript habe ich auf die bisherige 'formula syntax' Schreibweise zurück gegriffen, da aktuell noch die meisten Hilfeseite mit dieser Syntax arbeiten. \n\n\n## Einführungen in R\n\nEine Sammlung von Lehrskripten und Unterlagen aus verschiedenen Kontexten zum selbst weiter lernen: \n\n[R for Data Science](https://r4ds.had.co.nz/) **das** Standardwerk für Datenanalysen mit `{tidyverse}` - sehr intuitive Einführung, Fokus auf Data Science\n\n[Problemorientiere Einführungen in spezifische Anwendungen \"do more with R\"](https://www.infoworld.com/article/3411819/do-more-with-r-video-tutorials.html)\n\n[Ten simple rules for teaching yourself R](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1010372)\n\n[Moderne Datenanalyse mit R](https://link.springer.com/book/10.1007/978-3-658-21587-3): Deutschsprachige Einführung in `{tidyverse}`\n\n[R for the Rest of Us](https://rfortherestofus.com/) bietet viele Tutorials und freie Kurse an, unter anderem auch viele [YouTube](https://www.youtube.com/channel/UCSoUNu8x-HblqqOK_EwdZGw) Videos.\n\n\n[Stata 2 R](https://stata2r.github.io/) richtet sich alle Anwender\\*innen von Stata, die auf R umsteigen möchten. Allerdings wird hier anstelle des `{tidyverse}` das Paket `{data.table}` für die Datenaufbereitung gezeigt. `{data.table}` ist auf der einen Seite sehr schnell, jedoch von der Syntaxlogik her etwas umständlicher als das `{tidyverse}`. Für alle, die mit sehr großen Datensätzen arbeiten lohnt es sich aber, `{data.table}` auszuprobieren.\n\n## RMarkdown\n\n[{rmarkdown}](https://rmarkdown.rstudio.com/) ermöglich es, formatierte Textelemente mit [Markdown](https://www.markdownguide.org/cheat-sheet/) und R code bzw. Output zu kombinieren. \nAnders als ein R Script enthält ein RMarkdown-Dokument nicht nur Befehle, sondern auch Text - welcher mit Hilfe von [Markdown](https://www.markdownguide.org/cheat-sheet/)-Befehlen formatiert werden kann.\nSo können Grafiken, Tabellen, usw. direkt und zeitgleich mit dem Begleittext erstellt werden.\nMit R Markdown können wir HTML, PDF, Word Dokumente, PowerPoint und HTML Präsentationen, Webseiten und Bücher erstellen.\nDiese gesamte Webseite wurde mit [{R Markdown}](https://bookdown.org/yihui/rmarkdown-cookbook/) bzw. dem verwandten Paket [{Quarto}](www.quarto.org/) erstellt.\n\nDie [Hilfeseiten und Dokumentation für R Markdown](https://rmarkdown.rstudio.com/) ist extrem umfangreich und auch die [Tutorials](https://rmarkdown.rstudio.com/lesson-1.html) und [Cheatsheets](https://rmarkdown.rstudio.com/lesson-15.html) sind hervorragend.\nDaher hier nur eine kleiner Überblick.\n\n### Markdown Syntax\nEin RMarkdown-Dokument sieht in seiner Grundform ungefähr so aus:\n \n\n\n````markdown\n---\ntitle: \"Mein erstes RMarkdown-Dokument\"\nauthor: \"Mein Name\"\ndate: \"2022-09-11\"\noutput: pdf_document\n---\n  \n# Überschrift 1\n\n## Unterüberschrift 2\n\nDies ist ein R Markdown-Dokument. \nMarkdown ist eine einfache Syntax für die Erstellung von HTML-, PDF- und MS Word-Dokumenten. \nText kann **fett** und *kursiv* geschrieben werden. \n\nWenn wir auf die Schaltfläche **Knit** klicken, wird ein Dokument erstellt.\nDas sowohl den Inhalt als auch die Ausgabe aller eingebetteten R-Code-Bausteine innerhalb des Dokuments enthält. \nEin R-Code-Baustein (\"chunk\") sieht so aus:\n\n```{r cars}\n# hier kommt der R Code hin\nsummary(mtcars$qsec)\n```\n\n````\n\n::: {.cell}\n::: {.cell-output-display}\n![](./pic/115_rmd_demo.png){width=75%}\n:::\n:::\n\n\n### Beispiel\n[Paper zu einem Beispieldatensatz, komplett in R Markdown geschrieben](https://allisonhorst.github.io/penguins_paper_distill/rjarticle/penguins.html)  \n\n[Hier findet ihr den Source-Code](https://github.com/allisonhorst/penguins_paper_distill/blob/46342ebf450dfdb49741ae9f7059c6e3c266af70/rjarticle/penguins.Rmd)\n\n\n## Cheatsheets\n\nEine Sammlung an Cheatsheets für eine breite Palette an Anwendungen gibt es [hier](https://www.rstudio.com/resources/cheatsheets/).\n\n+ Datenvisualisierung mit [`{ggplot2}`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)\n+ Datensätze bearbeiten mit [`{dplyr}`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)\n+ Datensätze erstellen/reshapen mit [`{tidyr}`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf)\n\n## `{ggplot2}`\n\nEine große Stärke von `ggplot2` sind die zahlreichen Erweiterungen, welche beispielsweise ermöglichen\n\n+ mehrere Grafiken zu kombinieren mit [`{patchwork}`](https://github.com/thomasp85/patchwork#patchwork)\n+ Karten zu erstellen mit [sf](https://oliviergimenez.github.io/intro_spatialR/#1), weitere [Link](https://ourcodingclub.github.io/tutorials/dataviz-beautification-synthesis/)\n+ fortgeschrittene Textformatierungen zu verwenden mit [`{ggtext}`](https://wilkelab.org/ggtext/)\n+ Grafiken als Animation zu erstellen [`{gganimate}`](https://gganimate.com/) - [eine Einführung](https://goodekat.github.io/presentations/2019-isugg-gganimate-spooky/slides.html) oder [hier](https://rpubs.com/bradyrippon/929572)\n+ Logos in in `{ggplot2}` einfügen mit [`{ggpath}`](https://mrcaseb.github.io/ggpath/)\n\nEine Übersicht zu Erweiterungspakteten für `{ggplot2}` findet sich [hier](https://exts.ggplot2.tidyverse.org/gallery/)\n\nAuch [The R Graph Gallery](https://r-graph-gallery.com/) bietet eine hervorragende Übersicht zu Darstellungsmöglichkeiten mit Syntaxbeispielen für `{ggplot2}`.\n\n+ [Tutorial von Cédric Scherer](https://cedricscherer.netlify.app/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)\n\n+ [Session zu intuitiveren Grafiken von Cara Thompson](https://www.youtube.com/watch?v=_indbXPXUw8)\n\n## Fortgeschrittene Anwendung von `lapply()`/`map()` mit selbstgeschriebenen Funktionen  {#purrr}\n\n+ Umfangreiche Einführung in loops mit `map()` und weiteren Funktionen aus `{purrr}` [Hendrik van Broekhuizen](https://hendrikvanb.gitlab.io/slides/purrr_beyond_map.html#1) \n+ Modellserien: [Blog von Tim Tiefenbach](https://tim-tiefenbach.de/post/2023-dplyr-many-models/) zu eleganten Möglichkeiten\n\n## regex\n\nFür die Arbeit mit Textvariablen sind *regular expressions* (regex) eine große Hilfe. \nDamit lassen sich beispielsweise Textabschnitte nach bestimmten Zeichenfolgen durchsuchen, diese ersetzen usw.\nDer [Blog von Joshua C. Fjelstul](https://jfjelstul.github.io/regular-expressions-tutorial/) ist ein guter Einstieg.\nDarüber hinaus gibt es ein hilfreiches Cheatsheet zu [*regex* in R](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf) und das *regex* -Paket [`{stringr}`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf)\n\n## Weiteres \n\n[`{easystats}`](https://github.com/easystats/easystats#easystats-framework-for-easy-statistical-modeling-visualization-and-reporting) bietet eine Sammlung von Paketen, welche statische Auswertungen erleichtern und vereinheitlichen. Gleichzeitig geht diese Vereinheitlichung aber mit einer beschränkteren Flexibilität einher - das ist Geschmackssache und kommt auf den Anwendungsfall an. Wir haben aus dem `easystats`-Universum unter anderem [{performance}](https://easystats.github.io/performance/)  und [{effectsize}](https://easystats.github.io/effectsize/index.html) kennengelernt.\n\n[Ereigniszeitmodelle / Event History Modellung / Survival Analysis](https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html)\n\n\n\n\n::: {#refs}\n:::\n",
    "supporting": [
      "references_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}