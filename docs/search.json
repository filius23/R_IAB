[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R am IAB",
    "section": "",
    "text": "Willkommen\nEine Einführung in R für Mitarbeitende am IAB.\n\n\n\n\n\n\n\n\n\nKursinformationen\n\n   17.04 - 18.04. und 24.04. - 25.04.2023\n   8:30 – 15:30 Uhr\n   E09"
  },
  {
    "objectID": "01_intro.html",
    "href": "01_intro.html",
    "title": "1  Einstieg in R",
    "section": "",
    "text": "Bei R handelt es sich um ein vollständig kostenloses Programm, das Sie unter CRAN herunterladen können. Ebenfalls kostenlos ist die Erweiterung RStudio, die Sie unter hier herunterladen können. RStudio erweitert R um eine deutlich informativere und ansprechendere Oberfläche, Hilfe und Auto-Vervollständigung beim Schreiben von Syntax und insgesamt eine verbesserte Nutzeroberfläche. Jedoch ist RStudio eine Erweiterung von R, sodass Sie beide Programme benötigen.\n\n\n\n\n\n\nNote\n\n\n\nInstallieren Sie zuerst R und dann RStudio, dann erkennt RStudio die installierte R-Version und die beiden Programme verbinden sich in der Regel automatisch. R ist dabei sozusagen der Motor, RStudio unser Cockpit. Wir könnten direkt mit R arbeiten, aber mit RStudio haben wir eine komfortablere Option und einen besseren Überblick.\n\n\n\n\n\n\n \n\n\nFigure 1.1: R und RStudio"
  },
  {
    "objectID": "01_intro.html#rstudio-einrichten",
    "href": "01_intro.html#rstudio-einrichten",
    "title": "1  Einstieg in R",
    "section": "1.2 RStudio einrichten",
    "text": "1.2 RStudio einrichten\nÖffnen Sie nach erfolgreicher Installation die Anwendung RStudio  und Sie sollten folgende Ansicht vor sich sehen:\n\n\n\n\nUm Probleme bei der künftigen Arbeit mit R zu vermeiden, deaktivieren Sie bitte das automatische Speichern und Laden des Workspace. Rufen Sie dazu das entsprechende Menü unter dem Reiter “Tools -> Global options” auf und deaktivieren Sie bitte “Restore .RData into workspace at startup” und setzen Sie “Save workspace to .RData on exit:” auf Never. RStudio speichert ansonsten alle geladenen Objekte wenn Sie die Sitzung beenden und lädt diese automatisch wenn Sie das Programm das nächste Mal öffnen. Dies führt erfahrungsgemäß zu Problemen.\n\n\n\n\nBestätigen Sie die Einstellungen mit “Apply” und schließen Sie das Fenster mit “OK”."
  },
  {
    "objectID": "01_intro.html#erste-schritte-in-r",
    "href": "01_intro.html#erste-schritte-in-r",
    "title": "1  Einstieg in R",
    "section": "1.3 Erste Schritte in R",
    "text": "1.3 Erste Schritte in R\nNach diesen grundlegenden Einstellungen können wir uns an die ersten Schritte in R machen. Öffnen Sie dazu zunächst ein Script, indem Sie auf das weiße Symbol links oben klicken oder drücken Sie gleichzeitig STRG/Command + Shift + N .\n\n\n\n\nEs öffnet sich ein viertes Fenster, sodass Sie nun folgende Ansicht vor sich haben sollten:\n\n\n\n\nDieser Scripteditor ist der Ort, an dem wir Befehle erstellen und anschließend durchführen werden. Der Scripteditor dient dabei als Sammlung aller durchzuführenden Befehle. Wir können diese Sammlungen speichern, um sie später wieder aufzurufen und vor allem können wir so Befehlssammlungen mit anderen teilen oder Skripte von anderen für uns selbst nutzen. Wir entwerfen also zunächst im Scripteditor eine Rechnung:\n\n\n\n\nUm diese nun auszuführen, klicken wir in die auszuführende Zeile, sodass der Cursor in dieser Zeile ist und drücken gleichzeitig STRG und Enter (Mac-User Command und Enter):\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1.2: Shortcuts für Berechnungen\n\n\nR gibt die Ergebnisse unten in der Console aus:\n\n\n\n\nDas funktioniert auch für mehrere Rechnungen auf einmal indem wir mehrere Zeilen markieren und dann wieder STRG und Enter (Mac-User Command und Enter) drücken:\n\n\n\n\nEingaben aus dem Script-Editor und Ergebnisse aus der Konsole werden in Zukunft so dargestellt:\n\n2+5\n\n[1] 7\n\n3-4\n\n[1] -1\n\n5*6\n\n[1] 30\n\n7/8\n\n[1] 0.875\n\n\nR beherrscht natürlich auch längere Berechnungen, zum Beispiel wird auch Punkt vor Strich beachtet:\n\n2+3*2\n\n[1] 8\n\n(2+3)*2\n\n[1] 10\n\n\nAuch weitere Operationen sind möglich:\n\n4^2 ## 4²\nsqrt(4) ## Wurzel \nexp(1) ## Exponentialfunktion (Eulersche Zahl)\nlog(5) ## Natürlicher Logarithmus\nlog(exp(5)) ## log und exp heben sich gegenseitig auf\n\nZahlenreihen können wir mit seq() oder : erstellen:\n\n2:6\n\n[1] 2 3 4 5 6\n\nseq(2,11,3)\n\n[1]  2  5  8 11\n\n\n\n1.3.1 Objekte erstellen\nBisher haben wir uns unsere Berechnungen immer direkt ausgeben lassen. Für umfangreichere Berechnungen - wir wollen ja ab dem nächsten Kapitel mit Datensätzen arbeiten - wollen wir aber die Zwischenschritte speichern.\nErgebnisse lassen sich mit einem <- unter einem beliebigen Namen als Objekt speichern. Dann wird R uns nicht das Ergebnis anzeigen, sondern den Befehl in der Konsole wiederholen:\n\nx <- 4/2\n\nIm Fenster “Environment” rechts oben sehen wir jetzt das abgelegte Objekt x:\n\n\n\n\nWir können es später wieder aufrufen:\n\nx\n\n[1] 2\n\n\nAußerdem können wir Objekte in Rechnungen weiter verwenden - wir setzen einfach x ein und erstellen zB. y:\n\ny <- x * 5\ny\n\n[1] 10\n\n\n\n\n\n\n\n\n1.3.2 Mehrere Werte ablegen\nMit c() lassen sich mehrere Werte unter einem Objekt ablegen und auch mit diesen lässt sich rechnen:\n\nx1 <- c(1,2,3)\nx1\n\n[1] 1 2 3\n\nx1* 2\n\n[1] 2 4 6\n\n\nMit length() können wir die Anzahl der abgelegten Werte nachsehen:\n\nlength(x1)\n\n[1] 3\n\n\n\ny1 <- c(10,11,9)\ny1\n\n[1] 10 11  9\n\ny1/x1\n\n[1] 10.0  5.5  3.0\n\n\n\n\n1.3.3 Werte löschen\nNatürlich können wir Objekte auch wieder löschen und zwar mit rm(). Wenn wir ein nicht existierendes Objekt aufrufen bekommen wir eine Fehlermeldung:\n\nrm(x1)\nx1\n\nError in eval(expr, envir, enclos): Objekt 'x1' nicht gefunden\n\n\nMit rm(list = ls()) können alle Objekte aus dem Environment gelöscht werden.\n\n\n1.3.4 Scripte speichern\nDas Script können wir speichern, um es später wieder aufzurufen.\n\n\n\n\nWichtig ist dabei, der gespeicherten Datei die Endung “.R” zu geben, also zum Beispiel “01_Script.R”.\n\n\n\n\n\n1.3.5 Kommentare\nNeben den eigentlichen Befehlen sind Kommentare ein zentraler Bestandteil einer Datenanalyse-Syntax. Nur so können künftige Nutzende (insbesondere wir selbst in 3 Wochen oder 2 Jahren) nachvollziehen was passiert. Kommentare in R können mit # eingefügt werden:\n\n2+ 5 # hier steht ein Kommentar\n\n[1] 7\n\n2+ # auch hier kann ein Kommentar stehen\n  5\n\n[1] 7\n\n\n\n( 2 + # ein\n    3) * # kommentar\n  2 # über mehrere Zeilen\n\n[1] 10\n\n\nTipp: Erstellen Sie sich am besten sofort einen Ordner, in dem Sie alle R Scripte und Datensätze aus dieser Veranstaltung gesammelt ablegen.\n\n\n1.3.6 Skripte strukturieren\n\n# Überschrift 1 ----\n\n## Abschnit 1.1 ----\n3+2*4\n3+2*3\n## Abschnit 1.2 ----\n3+2*sqrt(3)\n\n# Überschrift 2 ----\nx <- c(2,6,8,2,35)\ny <- seq(2,10,2)\n\ny/x"
  },
  {
    "objectID": "01_intro.html#übungen",
    "href": "01_intro.html#übungen",
    "title": "1  Einstieg in R",
    "section": "1.4 Übungen",
    "text": "1.4 Übungen\n\nLegen Sie die Anzahl der Studierenden an der Uni Oldenburg (15643) unter stud ab.\nLegen Sie die Anzahl der Professuren an der Uni Oldenburg (210) unter prof ab.\nBerechnen Sie die Anzahl der Studierenden pro Professur an der Uni Oldenburg indem Sie die Objekte stud und prof verwenden.\nLegen Sie das Ergebnis unter studprof ab und rufen Sie das das Objekt noch einmal auf!\nSehen Sie die erstellten Variablen im Environment-Fenster?\nLegen Sie die Studierendenzahlen der Uni Bremen (19173), Uni Vechta (5333) und Uni Oldenburg (15643) zusammen unter studs ab.\nLegen Sie die Zahl der Profs der Uni Bremen (322), Uni Vechta (67) und Uni Oldenburg (210) zusammen unter profs ab.\nBerechnen die Anzahl der Studierenden pro Professur für alle drei Universitäten.\nSie möchten zusätzlich die Zahl der Studierenden (14000) und Professuren (217) der Uni Osnabrück in studs und profs ablegen. Wie gehen Sie vor?\nBerechnen Sie für alle vier Universitäten das Verhältnis von Studierenden und Professuren!\nLöschen Sie das Objekt stud. Woran erkennen Sie, dass das funktioniert hat?\nLöschen Sie alle Objekte aus dem Environment. Woran erkennen Sie, dass das funktioniert hat?"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Links & Weiterführendes",
    "section": "",
    "text": "In diesem Kurs haben wir die Pipe %>% aus {tidyverse} (streng genommen aus dem Paket {magrittr}) kennen gelernt. Mit dem Update auf R 4.1 wurde in base R ebenfalls eine Pipe |> eingeführt und Hilfeseiten usw. ersetzen langsam, aber sicher %>% durch |>. Für (nahezu) alle Anwendungen, die wir kennengelernt haben, verhalten sich beide Pipes identisch - und nachdem am BIBB R die R-Version 4.0.5 zur Verfügung steht, haben wir uns an ‘alte Variante’ gehalten. Letztlich spricht aber nichts dagegen, nach einem Update auf |> umzusteigen - oder einfach bei %>% zu bleiben.\n\nUnter anderem steht hier mehr zu den Unterschieden zwischen beiden Pipes. Außerdem bietet dieser Blogbeitrag einen guten Überblick zu den Fallstricken beim Umstieg von %>% auf |>."
  },
  {
    "objectID": "references.html#anonymfun",
    "href": "references.html#anonymfun",
    "title": "Links & Weiterführendes",
    "section": "Anonyme Funktionen: .x vs. /(x)",
    "text": "Anonyme Funktionen: .x vs. /(x)\nMit R 4.1.0 wurde in base R eine neue ‘anonymous function short hand’ eingeführt, welche die ‘formula syntax’ Schreibweise ~mean(.x) ablöst, die wir in Kapitel 6 kennen gelernt haben. In der neuen base R wäre das \\(x) mean(x) geschrieben.\nAus der {purrr} release notes für Version 1.0.0 (Dezember 2022): We believe that it’s better to use these new base tools because they work everywhere: the base pipe doesn’t require that you load magrittr and the new function shorthand works everywhere, not just in purrr functions. Additionally, being able to specify the argument name for the anonymous function can often lead to clearer code.\nDementsprechend würde die Anwendung in across() wie folgt aussehen:\n\nsat_small <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",n_max = 16) %>% \n    select(F1450_04,F1450_05,F1450_06) %>% \n    slice(12:16)\n\n# formula syntax\nsat_small %>% \n  mutate(across(matches(\"F1450\"),~mean(.x)))\n# anonymous function short hand\nsat_small %>% \n  mutate(across(matches(\"F1450\"),\\(x) mean(x) ))\n\nIn diesem Skript habe ich auf die bisherige ‘formula syntax’ Schreibweise zurück gegriffen, da aktuell noch die meisten Hilfeseite mit dieser Syntax arbeiten."
  },
  {
    "objectID": "references.html#quarto",
    "href": "references.html#quarto",
    "title": "Links & Weiterführendes",
    "section": "Quarto",
    "text": "Quarto\nQuarto ist eine Erweiterung/Weiterentwicklung von RMarkdown. Allerdings erfordert Quarto eine separate Installation, mehr Infos."
  },
  {
    "objectID": "references.html#einführungen-in-r",
    "href": "references.html#einführungen-in-r",
    "title": "Links & Weiterführendes",
    "section": "Einführungen in R",
    "text": "Einführungen in R\nEine Sammlung von Lehrskripten und Unterlagen aus verschiedenen Kontexten zum selbst weiter lernen:\nR for Data Science das Standardwerk für Datenanalysen mit {tidyverse} - sehr intuitive Einführung, Fokus auf Data Science\nProblemorientiere Einführungen in spezifische Anwendungen “do more with R”\nTen simple rules for teaching yourself R\nModerne Datenanalyse mit R: Deutschsprachige Einführung in {tidyverse}\nR for the Rest of Us bietet viele Tutorials und freie Kurse an, unter anderem auch viele YouTube Videos.\nStata 2 R richtet sich alle Anwender*innen von Stata, die auf R umsteigen möchten. Allerdings wird hier anstelle des {tidyverse} das Paket {data.table} für die Datenaufbereitung gezeigt. {data.table} ist auf der einen Seite sehr schnell, jedoch von der Syntaxlogik her etwas umständlicher als das {tidyverse}. Für alle, die mit sehr großen Datensätzen arbeiten lohnt es sich aber, {data.table} auszuprobieren."
  },
  {
    "objectID": "references.html#beispiel-für-vollständiges-paper-geschrieben-mit-rmarkdown",
    "href": "references.html#beispiel-für-vollständiges-paper-geschrieben-mit-rmarkdown",
    "title": "Links & Weiterführendes",
    "section": "Beispiel für vollständiges Paper geschrieben mit RMarkdown",
    "text": "Beispiel für vollständiges Paper geschrieben mit RMarkdown\nPaper zu einem Beispieldatensatz, komplett in R Markdown geschrieben\nHier findet ihr den Source-Code"
  },
  {
    "objectID": "references.html#cheatsheets",
    "href": "references.html#cheatsheets",
    "title": "Links & Weiterführendes",
    "section": "Cheatsheets",
    "text": "Cheatsheets\nEine Sammlung an Cheatsheets für eine breite Palette an Anwendungen gibt es hier.\n\nDatenvisualisierung mit {ggplot2}\nDatensätze bearbeiten mit {dplyr}\nDatensätze erstellen/reshapen mit {tidyr}"
  },
  {
    "objectID": "references.html#ggplot2",
    "href": "references.html#ggplot2",
    "title": "Links & Weiterführendes",
    "section": "{ggplot2}",
    "text": "{ggplot2}\nEine große Stärke von ggplot2 sind die zahlreichen Erweiterungen, welche beispielsweise ermöglichen\n\nmehrere Grafiken zu kombinieren mit {patchwork}\nKarten zu erstellen mit sf, weitere Link\nfortgeschrittene Textformatierungen zu verwenden mit {ggtext}\nGrafiken als Animation zu erstellen {gganimate} - eine Einführung oder hier\nLogos in in {ggplot2} einfügen mit {ggpath}\n\nEine Übersicht zu Erweiterungspakteten für {ggplot2} findet sich hier\nAuch The R Graph Gallery bietet eine hervorragende Übersicht zu Darstellungsmöglichkeiten mit Syntaxbeispielen für {ggplot2}.\n\nTutorial von Cédric Scherer\nSession zu intuitiveren Grafiken von Cara Thompson"
  },
  {
    "objectID": "references.html#purrr",
    "href": "references.html#purrr",
    "title": "Links & Weiterführendes",
    "section": "Fortgeschrittene Anwendung von lapply()/map() mit selbstgeschriebenen Funktionen",
    "text": "Fortgeschrittene Anwendung von lapply()/map() mit selbstgeschriebenen Funktionen\n\nUmfangreiche Einführung in loops mit map() und weiteren Funktionen aus {purrr} Hendrik van Broekhuizen\nModellserien: Blog von Tim Tiefenbach zu eleganten Möglichkeiten"
  },
  {
    "objectID": "references.html#regex",
    "href": "references.html#regex",
    "title": "Links & Weiterführendes",
    "section": "regex",
    "text": "regex\nFür die Arbeit mit Textvariablen sind regular expressions (regex) eine große Hilfe. Damit lassen sich beispielsweise Textabschnitte nach bestimmten Zeichenfolgen durchsuchen, diese ersetzen usw. Der Blog von Joshua C. Fjelstul ist ein guter Einstieg. Darüber hinaus gibt es ein hilfreiches Cheatsheet zu regex in R und das regex -Paket {stringr}"
  },
  {
    "objectID": "references.html#weiteres",
    "href": "references.html#weiteres",
    "title": "Links & Weiterführendes",
    "section": "Weiteres",
    "text": "Weiteres\n{easystats} bietet eine Sammlung von Paketen, welche statische Auswertungen erleichtern und vereinheitlichen. Gleichzeitig geht diese Vereinheitlichung aber mit einer beschränkteren Flexibilität einher - das ist Geschmackssache und kommt auf den Anwendungsfall an. Wir haben aus dem easystats-Universum unter anderem {performance} und {effectsize} kennengelernt.\nEreigniszeitmodelle / Event History Modellung / Survival Analysis"
  },
  {
    "objectID": "01_intro.html#installation-und-einrichten-von-r-rstudio",
    "href": "01_intro.html#installation-und-einrichten-von-r-rstudio",
    "title": "1  Einstieg in R",
    "section": "1.1 Installation und Einrichten von R & RStudio",
    "text": "1.1 Installation und Einrichten von R & RStudio\nBei R handelt es sich um ein vollständig kostenloses Programm, das Sie unter CRAN herunterladen können. Ebenfalls kostenlos ist die Erweiterung RStudio, die Sie unter hier herunterladen können. RStudio erweitert R um eine deutlich informativere und ansprechendere Oberfläche, Hilfe und Auto-Vervollständigung beim Schreiben von Syntax und insgesamt eine verbesserte Nutzeroberfläche. Jedoch ist RStudio eine Erweiterung von R, sodass Sie beide Programme benötigen.\n\n\n\n\n\n\nNote\n\n\n\nInstallieren Sie zuerst R und dann RStudio, dann erkennt RStudio die installierte R-Version und die beiden Programme verbinden sich in der Regel automatisch. R ist dabei sozusagen der Motor, RStudio unser Cockpit. Wir könnten direkt mit R arbeiten, aber mit RStudio haben wir eine komfortablere Option und einen besseren Überblick.\n\n\n\n\n\n\n \n\n\nFigure 1.1: R und RStudio"
  }
]